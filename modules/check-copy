#!/bin/bash

# change IFS, that space in directory does not break find (temporary fix)
IFS=$'\n'
# check if all prerequisits for rsync are met
if [ ! "${mode_snapshot}" == "file" ]
	then	# not yet implemented
		#if [ "${snap_limit_current}" -gt "0" ] || [ -n "${snap_list_current}" ]
		#	then	probe_snap_rsync_current=${dir_snap_current}${dir_offset_current}
		#	else	probe_snap_rsync_current=${dir_root_current}${dir_offset_current}
		#fi

		if [ "${side_current}" == "source" ]
			then	probe_snap_rsync_current=${dir_root_current}${dir_offset_current}/${sync_name_source_current}
			else	probe_snap_rsync_current=${dir_root_current}${dir_offset_current}
		fi

		# check if directory exists
		if [ -n "${config_server_current}" ]
			then	probe=$(ssh ${config_server_current}${config_port_current} "if [ -e ${probe_snap_rsync_current} ]; then echo 1; else echo 0; fi")
			else	probe=$(if [ -e ${probe_snap_rsync_current} ]; then echo 1; else echo 0; fi)
		fi

		if [ "${probe}" == "1" ]
			then	snap_rsync_current=$(echo "${probe_snap_rsync_current}" | sed 's/ /\\ /g')
			else	exit 81
		fi

	elif	[ "${mode_snapshot}" == "file" ]
		then	if [ "${side_current}" == "source" ] && [ "${snap_limit_current}" == "0" ]
				then	snap_rsync_current=${dir_root_current}${dir_offset_current}/${sync_name_source_current}
				elif [ "${side_current}" == "target" ]
					then	snap_rsync_current=${dir_root_current}${dir_offset_current}
			fi
	else	:
fi
IFS=${IFSBAK}

echo "${snap_rsync_current}"

##### variable list. these will be picked up by debug #####
# import_fields = side_current mode_snapshot config_server_current config_port_current snap_limit_current snap_list_current dir_root_current dir_snap_current dir_offset_current sync_name_source_current
# export_fields = snap_rsync_current 
