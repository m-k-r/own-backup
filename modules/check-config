#!/bin/bash

##### checks which may lead to exit #####

# checks if a valid debuglevel is set
if [ -n "${output}" ]
	then	if [ "${output}" == "progress" ]
			then	show_progress=set
				export show_progress

			elif [ "${output}" == "commands" ]
				then	show_progress=set
					show_commands=set
					export show_progress show_commands

			elif [ "${output}" == "datasets" ]
				then	show_progress=set
					show_datasets=set
					export show_progress show_datasets

			elif [ "${output}" == "snapshots" ]
				then	show_progress=set
					show_snapshots=set
					export show_progress show_snapshots

			elif [ "${output}" == "snapvars" ]
				then	show_progress=set
					show_snapvars=set
					export show_progress show_snapvars

			elif [ "${output}" == "full" ]
				then	show_progress=set
					show_commands=set
					show_datasets=set
					show_snapshots=set
					show_snapvars=set
					export show_progress show_commands show_datasets show_snapshots show_snapvars

			else	echo "no supported output-level found: ${output}" && exit 1
		fi
fi

# checks if mode and filesystem is, if set, correct.
if [ -n "${config_mode}" ]
	# only grep whole words"
	then	check_mode=$(echo ${mode_supported} | grep "\b${config_mode}\b")
		if [ ! -n "${check_mode}" ]
			then	echo "${config_mode} is not a viable mode" && exit 1
		fi

	else	if [ ! -n "${config_fs}" ]
			then	echo "neither mode nor filesystem is set" && exit 1
		fi
fi

if [ -n "${config_fs}" ]
	then	check_fs=$(echo ${fs_supported} | grep "\b${config_fs}\b")
		if [ ! -n "${check_fs}" ]
			then	echo "${config_fs} is not a viable filesystem" && exit 1
		fi
fi
unset check_mode check_fs

# either ${dir_snap_source} or ${dir_root_source} has to be specified
if [ ! -n "${dir_snap_source}" ]
	then	if [ -n "${dir_root_source}" ]
			then	dir_snap_source=${dir_root_source}
			else	echo "no sourcedirectory is specified" && exit 1
		fi

	elif [ ! -n "${dir_root_source}" ]
		then	dir_root_source=${dir_snap_source}
fi

# either ${dir_snap_target} or ${dir_root_target} has to be specified
if [ ! -n "${dir_snap_target}" ]
	then	if [ -n "${dir_root_target}" ]
			then	dir_snap_target=${dir_root_target}
			else	echo "no targetdir is specified" && exit 1
		fi

	elif [ ! -n "${dir_root_target}" ]
		then	dir_root_target=${dir_snap_target}
fi


# if snap_list is set but no frequency to it the script will fail
if [ -n "${snap_list_source}" ] && [ ! -n "${snap_list_frequency_source}" ]
	then	echo "snap_list is set but no frequency to it" && exit 1
fi

if [ -n "${snap_list_target}" ] && [ ! -n "${snap_list_frequency_target}" ]
	then	echo "snap_list is set but no frequency to it" && exit 1
fi

# some snap_location_source/target are only allowed for some mode
if [ -n "${snap_location_source}" ]
	then	check_snap_location=$(echo "${snap_location_supported}" | grep "\b${snap_location_source}\b")

		if [ ! -n "${check_snap_location}" ]
			then	echo "${check_snap_location} is not viable for snapshotremote" && exit 1
		fi

		if [ "${snap_location_source}" == "native" ] && [[ ! "${mode}" == *"sql" ]] || [ "${snap_location_source}" == "local" ] && [ ! "${config_fs}" == "file" ]
			then	echo "snapshotremote: ${snap_location_source} is not possible with mode/filesystem: ${mode}/${config_fs}" && exit 1
		fi
fi

if [ -n "${snap_location_target}" ]
	then	check_snap_location=$(echo "${snap_location_supported}" | grep "\b${snap_location_target}\b")

		if [ ! -n "${check_snap_location}" ]
			then	echo "${check_snap_location} is not viable for snapshotremote" && exit 1
		fi

		if [ "${snap_location_target}" == "native" ] && [[ ! "${mode}" == *"sql" ]] || [ "${snap_location_target}" == "local" ] && [ ! "${config_fs}" == "file" ]
			then	echo "snapshotremote: ${snap_location_target} is not possible with mode/filesystem: ${mode}/${config_fs}" && exit 1
		fi
fi

##### exports of variables which are created here #####
export dir_root_source dir_snap_source dir_root_target dir_snap_target

##### variable list. these will be picked up by debug #####
# import_fields =
# export_fields = output show_commands show_datasets show_snapshots dir_snap_source dir_snap_target dir_root_source dir_root_target 
