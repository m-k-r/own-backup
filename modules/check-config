#!/bin/bash

##### checks with exit 1 #####

# checks if a valid debuglevel is set
if [ -n "${debug}" ]
	then	if [ "${debug}" == "commands" ]
			then	show_commands="set"
				export show_commands

			elif [ "${debug}" == "datasets" ]
				then	show_datasets="set"
					export show_datasets

			elif [ "${debug}" == "snapshots" ]
				then	show_snapshots="set"
					export show_snapshots

			elif [ "${debug}" == "snapvars" ]
				then	show_snapvars="set"
					export show_snapvars

			elif [ "${debug}" == "full" ]
				then	show_commands="set"
					show_datasets="set"
					show_snapshots="set"
					show_snapvars="set"
					export show_commands show_datasets show_snapshots show_snapvars

			else	echo "no supported debug-level found: ${debug}" && exit 1
		fi
fi

# checks if mode and filesystem is, if set, correct.
if [ -n "${config_mode}" ]
	# only grep whole words"
	then	check_mode=$(echo ${mode_supported} | grep "\b${config_mode}\b")
		if [ ! -n "${check_mode}" ]
			then	echo "${config_mode} is not a viable mode" && exit 1
		fi

	else	if [ ! -n "${config_fs}" ]
			then	echo "neither mode nor filesystem is set" && exit 1
		fi
fi

if [ -n "${config_fs}" ]
	then	check_fs=$(echo ${fs_supported} | grep "\b${config_fs}\b")
		if [ ! -n "${check_fs}" ]
			then	echo "${config_fs} is not a viable filesystem" && exit 1
		fi
fi
unset check_mode check_fs

# either ${dir_snap_source} or ${dir_root_source} has to be specified
if [ ! -n "${dir_snap_source}" ]
	then	if [ -n "${dir_root_source}" ]
			then	dir_snap_source=${dir_root_source}
			else	echo "no sourcedirectory is specified" && exit 1
		fi

	elif [ ! -n "${dir_root_source}" ]
		then	dir_root_source=${dir_snap_source}
fi

# either ${dir_snap_target} or ${dir_root_target} has to be specified
if [ ! -n "${dir_snap_target}" ]
	then	if [ -n "${dir_root_target}" ]
			then	dir_snap_target=${dir_root_target}
			else	echo "no targetdir is specified" && exit 1
		fi

	elif [ ! -n "${dir_root_target}" ]
		then	dir_root_target=${dir_snap_target}
fi

# if set, dir_offset needs to start with a /
if [ -n "${dir_offset_source}" ]
	then	probe=$(echo ${dir_offset_source} | cut -c 1)
		if [ ! "${probe}" == "/" ]
			then	echo "dir_offset needs to start with a /" && exit 1
		fi
fi

# if set, dir_offset needs to start with a /
if [ -n "${dir_offset_target}" ]
	then	probe=$(echo ${dir_offset_target} | cut -c 1)
		if [ ! "${probe}" == "/" ]
			then	echo "dir_offset needs to start with a /" && exit 1
		fi
fi

# the script expects an integer here
if [ ! -n "${snap_limit_source}" ]
	then	snap_limit_source=0
fi

if [ ! -n "${snap_limit_target}" ]
	then	snap_limit_target=0
fi

# if snap_list is set but no frequency to it the script will fail
if [ -n "${snap_list_source}" ] && [ ! -n "${snap_list_frequency_source}" ]
	then	echo "snap_list is set but no frequency to it" && exit 1
fi

if [ -n "${snap_list_target}" ] && [ ! -n "${snap_list_frequency_target}" ]
	then	echo "snap_list is set but no frequency to it" && exit 1
fi

##### exports of variables which are created here #####
export dir_root_source dir_snap_source dir_root_target dir_snap_target snap_limit_source snap_limit_target

config_fields="show_output show_commands show_datasets show_snapshots snap_limit_source snap_limit_target dir_snap_source dir_snap_target dir_root_source dir_root_target dir_offset_source dir_offset_target"