#!/bin/bash

# check if dataset/sync on sourcepool exists
if [[ -n "${current_server}" ]]; then
	probe=$(ssh ${current_ssh} "zfs list -Ho name \"${current_path_snap}\"/\"${current_sync_name}\" 2> /dev/null"); else
	probe=$(zfs list -Ho name "${current_path_snap}"/"${current_sync_name}"  2> /dev/null)
fi

if [[ "${probe}" == "${current_path_snap}/${current_sync_name}" ]]; then
	snap_set=${probe}; else

	# sync_name_source is sent from source to current, so it has to exist in source but not on target
	if [[ "${current_side}" == "source" ]] && [[ "${mode_transfer}" == "zfs" ]]; then
		exit 85
	fi

	if [[ -n "${current_server}" ]]; then
		probe=$(ssh ${current_ssh} "zfs list -Ho name ${current_path_snap}"); else
		probe=$(zfs list -Ho name ${current_path_snap})
	fi

	# in all cases current_path_snap has to exist on target. if mode_transfer is zfs sync_name_curret will be existing after this script
	# if mode transfer is rsync then current_sync_name will not be a zfs dataset and current_path_snap will be snapshotted.
	if [[ "${probe}" == "${current_path_snap}" ]]; then
		if [[ "${current_side}" == "target" ]] && [[ "${mode_transfer}" == "zfs" ]]; then
			snap_set=${current_path_snap}/${current_sync_name}; else
			snap_set=${current_path_snap}
		fi; else

		if [[ "${current_snap_limit}" == "0" ]]; then
			snap_set=unset; else
			exit 86
		fi
	fi
fi

if [[ ! "${snap_set}" == "unset" ]]; then
	if [[ -n "${current_server}" ]]; then
		snap_root=$(ssh ${current_ssh} "zfs list -Ho mountpoint \"${snap_set}\" 2> /dev/null"); else
		snap_root=$(zfs list -Ho mountpoint "${snap_set}"  2> /dev/null)
	fi

	# if snap_set doesn't exist yet on target, snap_root is zero, if it has no mountpoint snap_root is "-"
	if [[ -z "${snap_root}" ]] ||  [[ "${snap_root}" == "-" ]]; then
		snap_root=unset
	fi; else
	# if snap_set is unset snap_root is unset too
	snap_root=unset
fi

echo "${snap_root}~${snap_set}"

##### variable list. these will be picked up by debug #####
# import_fields = current_side mode_transfer current_server current_ssh current_path_snap current_sync_name
# export_fields = snap_root snap_set
