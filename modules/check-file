#!/bin/bash

# root/syncname has to exist on source and not on target
# snap/syncname doesn't have to exist on source and target but snap has to

if [ "${side_current}" == "source" ] && [ "${dir_root_current}" == "${dir_snap_current}" ]
	then	snap_set_current=unset
	elif [ "${side_current}" == "target" ] && [ ! "${snap_set_current}" == "unset" ]
		then	snap_root_current=unset
fi

# check if dir_root/sync exists
if [ ! "${snap_root_current}" == "unset" ]
	then	if [ -n "${config_server_current}" ]
			then	snap_root_current=$(ssh ${config_server_current}${config_port_current} "find ${dir_root_current}${dir_offset_current}/${sync_name_source_current} -maxdepth 0 2> /dev/null")
			else	snap_root_current=$(find ${dir_root_current}${dir_offset_current}/${sync_name_source_current} -maxdepth 0 2> /dev/null)
		fi

		if [ ! "${snap_root_current}" == "${dir_root_current}${dir_offset_current}/${sync_name_source_current}" ]
			then	exit 96
		fi
fi

# check if dataset exists
if [ ! "${snap_set_current}" == "unset" ]
	then	if [ -n "${config_server_current}" ]
			then	probe_snap_set_current=$(ssh ${config_server_current}${config_port_current} "find ${dir_snap_current} -maxdepth 0 2> /dev/null")
			else	probe_snap_set_current=$(find ${dir_snap_current} -maxdepth 0 2> /dev/null)
		fi

		if [ "${probe_snap_set_current}" == "${dir_snap_current}" ]
			then	snap_set_current=${dir_snap_current}${dir_offset_current}/${sync_name_target_current}
			else	exit 87
		fi
fi

echo "${snap_root_current} ${snap_set_current}"

##### variable list. these will be picked up by debug #####
# import_fields = side_current config_server_current config_port_current dir_root_current dir_snap_current dir_offset_current sync_name_source_current sync_name_target_current
# export_fields = snap_set_current snap_root_current
