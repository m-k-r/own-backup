#!/bin/bash

# For output the script uses pv which has to be between send and receive
if [[ "${show_progress}" == "set" ]] && [[ ! "${show_commands}" == "set" ]]; then
	# this feature is removed atm since btrfs itself doesn't offer this and "| pv" is currently not possible
	progress=" | pv"
fi

# btrfs copies the subvolume into a directory. so the actual subvolname has to be cut off
current_snap_set_target=$(echo "${current_snap_set_target}" | rev | cut -d "/" -f 2- | rev)

# btrfs send does not need snap_common_sourde, btrfs send incremental does
if [[ -n "${snap_common_source}" ]] && [[ ! "${snap_common_source}" == "unset" ]]; then
	# incremental send/receive
	if [[ "${show_commands}" == "set" ]]; then
		if [[ -n "${elem_server_source}" ]]; then
			command1="ssh ${ssh_source} \"btrfs send -p ${snap_common_source} ${snap_new_source}\""; else
			command1="btrfs send -p ${snap_common_source} ${snap_new_source}"
		fi; else

		if [[ -n "${elem_server_source}" ]] && [[ -n "${elem_server_target}" ]]; then
			ssh ${ssh_source} "btrfs send -p ${snap_common_source} ${snap_new_source}" | ssh ${ssh_target} "btrfs receive ${current_snap_set_target}/"
		elif [[ -n "${elem_server_source}" ]] && [[ ! -n "${elem_server_target}" ]]; then
			ssh ${ssh_source} "btrfs send -p ${snap_common_source} ${snap_new_source}" | btrfs receive "${current_snap_set_target}"/
		elif [[ ! -n "${elem_server_source}" ]] && [[ -n "${elem_server_target}" ]]; then
			btrfs send -p "${snap_common_source}" "${snap_new_source}" | ssh ${ssh_target} "btrfs receive ${current_snap_set_target}/"
		elif [[ ! -n "${elem_server_source}" ]] && [[ ! -n "${elem_server_target}" ]]; then
			btrfs send -p "${snap_common_source}" "${snap_new_source}" | btrfs receive "${current_snap_set_target}"/
		fi
	fi; else

	# if no snap_common_source exists
	if [[ "${show_commands}" == "set" ]]; then
		if [[ -n "${elem_server_source}" ]]; then
			command1="ssh ${ssh_source} \"btrfs send ${snap_new_source}\""; else
			command1="btrfs send ${snap_new_source}"
		fi; else

		if [[ -n "${elem_server_source}" ]] && [[ -n "${elem_server_target}" ]]; then
			ssh ${ssh_source} "btrfs send ${snap_new_source}" | ssh ${ssh_target} "btrfs receive ${current_snap_set_target}/"
		elif [[ -n "${elem_server_source}" ]] && [[ ! -n "${elem_server_target}" ]]; then
			ssh ${ssh_source} "btrfs send ${snap_new_source}" | btrfs receive "${current_snap_set_target}"/
		elif [[ ! -n "${elem_server_source}" ]] && [[ -n "${elem_server_target}" ]]; then
			btrfs send "${snap_new_source}" | ssh ${ssh_target} "btrfs receive ${current_snap_set_target}/"
		elif [[ ! -n "${elem_server_source}" ]] && [[ ! -n "${elem_server_target}" ]]; then
			btrfs send "${snap_new_source}" | btrfs receive "${current_snap_set_target}"/
		fi
	fi
fi

if [[ "${show_commands}" == "set" ]]; then
	if [[ -n "${elem_server_target}" ]]; then
		echo "${command1} | ssh ${ssh_target} \"btrfs receive ${current_snap_set_target}/\""; else
		echo "${command1} | btrfs receive ${current_snap_set_target}/"
	fi
fi

##### variable list. these will be picked up by debug #####
# import_fields = show_progress show_commands elem_server_source elem_server_target ssh_source ssh_target current_snap_set_target snap_new_source snap_common_source
# export_fields = command1
