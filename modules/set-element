#!/bin/bash

##### translate mode and fs to the internal modi

# translation matrix for mode and fs from frontend to mode{create|snapshot|transfer}
# internally the script destinguishes between create (the snapshot), (handle the) snapshot and transfer (the data)
if [[ -n "${elem_mode}" ]] && [[ ! "${elem_mode}" == "rsync" ]]; then
	mode_create=${elem_mode}; else
	mode_create=${elem_fs}
fi

mode_snapshot=${elem_fs}

if [[ ! -n "${elem_mode}" ]] && [[ ! "${elem_fs}" == "file" ]] || [[ "${elem_mode}" == "kvm" ]]; then
	mode_transfer=${elem_fs};
elif [[ "${elem_mode}" == "rsync" ]] || [[ "${elem_fs}" == "file" ]]; then
	mode_transfer=rsync
fi


##### rollback #####

# if rollback is set the source- and targetvariables have to be swapped
if [[ "${arg_snap_rollback}" == "set" ]]; then
	swap_var=${path_snap_source}
	path_snap_source=${path_snap_target}
	path_snap_target=${swap_var}

	swap_var=${path_root_source}
	path_root_source=${path_root_target}
	path_root_target=${swap_var}

	if [[ -n "${path_offset_source}" ]] || [[ -n "${path_offset_target}" ]]; then
		swap_var=${path_offset_source}
		path_offset_source=${path_offset_target}
		path_offset_target=${swap_var}
		export path_offset_source path_offset_target
	fi

	if [[ -n "${elem_server_source}" ]] ||  [[ -n "${elem_server_target}" ]]; then
		swap_var=${elem_server_source}
		elem_server_source=${elem_server_target}
		elem_server_target=${swap_var}

		swap_var=${snap_location_source}
		snap_location_source=${snap_location_target}
		snap_location_target=${swap_var}
		export elem_server_source elem_server_target snap_location_source snap_location_target

		if [[ -n "${elem_port_source}" ]] ||  [[ -n "${elem_port_target}" ]]; then
			swap_var=${elem_port_source}
			elem_port_source=${elem_port_target}
			elem_server_target=${swap_var}
		fi
	fi
	unset swap_var
fi


##### path conventions #####

# spaces in the directories are allowed but have to be escaped
probe=$(echo ${path_root_source} | grep " " | egrep -v "\\ ")
if [[ -n "${probe}" ]]; then
	path_root_source=$(echo ${path_root_source} | sed 's/ /\\ /g')
fi

probe=$(echo ${path_root_target} | grep " " | egrep -v "\\ ")
if [[ -n "${probe}" ]]; then
	path_root_target=$(echo ${path_root_target} | sed 's/ /\\ /g')
fi

probe=$(echo ${path_snap_source} | grep " " | egrep -v "\\ ")
if [[ -n "${probe}" ]]; then
	path_snap_source=$(echo ${path_snap_source} | sed 's/ /\\ /g')
fi

probe=$(echo ${path_snap_target} | grep " " | egrep -v "\\ ")
if [[ -n "${probe}" ]]; then
	path_snap_targete=$(echo ${path_snap_target} | sed 's/ /\\ /g')
fi
unset probe

# if set, path_offset needs to start with a / and end without
if [[ -n "${path_offset_source}" ]]; then
	probe=$(echo ${path_offset_source} | cut -c 1)
	if [[ ! "${probe}" == "/" ]]; then
		path_offset_source="/${path_offset_source}"
	fi

	probe=$(echo ${path_offset_source} | rev | cut -c 1)
	if [[ "${probe}" == "/" ]]; then
		path_offset_source=$(echo ${path_offset_source} | rev | cut -c 2- | rev)
	fi

	probe=$(echo ${path_offset_source} | grep " " | egrep -v "\\ ")
	if [[ -n "${probe}" ]]; then
		path_offset_source=$(echo ${path_offset_source} | sed 's/ /\\ /g')
	fi
	unset probe
	export path_offset_source
fi

if [[ -n "${path_offset_target}" ]]; then
	probe=$(echo ${path_offset_target} | cut -c 1)
	if [[ ! "${probe}" == "/" ]]; then
		path_offset_target="/${path_offset_target}"
	fi

	probe=$(echo ${path_offset_target} | rev | cut -c 1)
	if [[ "${probe}" == "/" ]]; then
		path_offset_target=$(echo ${path_offset_target} | rev | cut -c 2- | rev)
	fi

	probe=$(echo ${path_offset_target} | grep " " | egrep -v "\\ ")
	if [[ -n "${probe}" ]]; then
		path_offset_target=$(echo ${path_offset_target} | sed 's/ /\\ /g')
	fi
	unset probe
	export path_offset_target
fi


##### ports for rsync and ssh #####

if [[ -n "${elem_server_source}" ]]; then
	if [[ ! -n "${elem_port_source}" ]]; then
		elem_port_source=22
	fi
	ssh_source="${elem_server_source} -p ${elem_port_source}"
	export ssh_source

	if [[ "${snap_location_source}" == "direct" ]] || [[ "${snap_location_source}" == "local" ]]; then
		snap_location_remote_source=${elem_server_source}
		unset elem_server_source
		export snap_location_remote_source; else

		if [[ "${mode_transfer}" == "rsync" ]]; then
			ssh_source_transfer=" -e \"ssh -p ${elem_port_source}\" ${elem_server_source}:"
			export ssh_source_transfer
		fi
	fi
	unset elem_port_source
fi

if [[ -n "${elem_server_target}" ]]; then
	if [[ ! -n "${elem_port_target}" ]]; then
		elem_port_target=22
	fi
	ssh_target="${elem_server_target} -p ${elem_port_target}"
	export ssh_target

	if [[ "${snap_location_target}" == "direct" ]] || [[ "${snap_location_target}" == "local" ]]; then
		snap_location_remote_target=${elem_server_target}
		unset elem_server_target
		export snap_location_remote_target; else

		if [[ "${mode_transfer}" == "rsync" ]]; then
			ssh_target_transfer=" -e \"ssh -p ${elem_port_target}\" ${elem_server_target}:"
			export ssh_target_transfer
		fi
	fi
	unset elem_port_target
fi


##### snapshot limits #####

# the script expects an integer here. 0 means the snapshots are handled externally
if [[ ! -n "${snap_limit_source}" ]]; then
	snap_limit_source=0
fi

if [[ ! -n "${snap_limit_target}" ]]; then
	snap_limit_target=0
fi

# in these cases no snapshots should be created. so snap_limit has to be 0 and snap_list has to be unset
if [[ -n "${show_snapshots}" ]] || [[ -n "${arg_snap_rollback}" ]] || [[ -n "${arg_snap_multi}" ]]; then
	snap_limit_source=0
	unset snap_list_source
	export snap_limit_source
fi

if [[ -n "${show_snapshots}" ]] || [[ -n "${arg_snap_rollback}" ]] || [[ -n "${arg_snap_multi}" ]]; then
	snap_limit_target=0
	unset snap_list_target
	export snap_limit_target
fi


##### define strings for snapname #####

# Get the actual date and time in format and its stringlength
snap_date_offset=$((${#snap_date}))
# Defines the offset for the snapshot-comparison
snap_string="${snap_name}_${snap_date}"

if [[ "${mode_snapshot}" == "btrfs" ]] || [[ "${mode_snapshot}" == "file" ]] || [[ "${mode_snapshot}" == "mysql" ]]; then
	snap_string_separator="_";
elif [[ "${mode_snapshot}" == "zfs" ]] || [[ "${mode_snapshot}" == "kvm" ]]; then
	snap_string_separator="@"
fi


##### logging #####

if [[ -n "${log_dir}" ]]; then
	probe=$(echo ${log_dir} | rev | cut -c 1)
	if [[ "${probe}" == "/" ]]; then
		log_dir=$(echo ${log_dir} | rev | cut -c 2- | rev)
	fi
	log_file=${log_dir}/${mode_snapshot}_diff-current_sync_name_source-${snap_date}.txt
	if [[ -n "${log_usr}" ]]; then
		if [[ -n "${log_server}" ]]; then
			log_usr="${log_usr}@"; else
			probe=$(echo "${log_usr}" | grep ":" || true)
			if [[ ! -n "${probe}" ]]; then
				log_usr="${log_usr}:${log_usr}"
			fi
		fi
		export log_usr
	fi

	if [[ -n "${log_server}" ]]; then
		if [[ ! -n "${log_server_port}" ]]; then
			log_server_port=22
		fi
		log_server="${log_server} -p ${log_server_port}"
		export logserver
		unset log_server_port
	fi
	export log_file
	unset probe log_dir
fi

##### exports of variables which are created here #####
export mode_create mode_snapshot mode_transfer snap_date_offset snap_string snap_string_separator path_snap_source path_snap_target path_root_source path_root_target

##### variable list. these will be picked up by debug #####
# import_fields = arg_snap_multi arg_snap_rollback log_dir log_usr elem_fs elem_mode elem_server_source elem_server_target elem_port_source elem_port_target snap_location_source snap_location_target snap_limit_source snap_limit_target mode_snapshot show_snapshots snap_date snap_name path_root_source path_root_target path_snap_source path_snap_target path_offset_source path_offset_target
# export_fields = mode_create mode_snapshot mode_transfer log_file log_usr elem_server_source ssh_source snap_location_source ssh_source_transfer snap_location_remote_source elem_server_target ssh_target snap_location_target ssh_target_transfer snap_location_remote_target snap_limit_source snap_limit_target path_snap_source path_snap_target path_root_source path_root_target path_offset_source path_offset_target snap_date snap_date_offset snap_string snap_string_separator
