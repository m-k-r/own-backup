#!/bin/bash

# ------------------------------- Functions ------------------------------------

function check-path () {
	if [[ "${1}" == "escape_space" ]]; then
		probe=$(echo "${!2}" | grep " " | egrep -v '\\ ')
		if [[ -n "${probe}" ]]; then
			probe=$(echo "${!2}" | sed 's/ /\\ /g')
			export ${2}="${probe}"
		fi;
	elif [[ "${1}" == "unescape_space" ]]; then
		probe=$(echo "${!2}" | grep '\\ ')
		if [[ -n "${probe}" ]]; then
			probe=$(echo "${!2}" | sed 's/\\ / /g')
			export ${2}="${probe}"
		fi;
	elif [[ "${1}" == "add_slash_start" ]]; then
		probe=$(echo "${!2}" | cut -c 1)
		if [[ ! "${probe}" == "/" ]]; then
			probe="/${!2}"
			export ${2}="${probe}"
		fi;
	elif [[ "${1}" == "add_slash_end" ]]; then
		probe=$(echo "${!2}" | rev | cut -c 1)
		if [[ ! "${probe}" == "/" ]]; then
			probe="${!2}/"
			export ${2}="${probe}"
		fi;
	elif [[ "${1}" == "rm_slash_end" ]]; then
		probe=$(echo "${!2}" | rev | cut -c 1)
		if [[ "${probe}" == "/" ]]; then
			probe=$(echo "${!2}" | rev | cut -c 2- | rev)
			export ${2}="${probe}"
		fi
	fi
	unset probe
}

function swap-rollback () {
	swap_var=${!1}
	export ${1}="${!2}"
	export ${2}="${swap_var}"
	unset swap_var
}

function ssh-connect () {
	# check if a socket already exists
	probe=$(ssh -O check -S ~/.ssh/%C  -p "${1}" "${2}" 2>&1 | grep 'No such file or directory')

	if [[ -n "${probe}" ]]; then
		ssh -Nf -p "${1}" "${2}" -o ControlMaster=auto -o ControlPath=~/.ssh/%C -o ControlPersist=1m
	fi
}

# ------------------------------ Main Script -----------------------------------

##### translate mode and fs to the internal modi

# translation matrix for mode and fs from frontend to mode{create|snapshot|transfer}
# internally the script destinguishes between create (the snapshot), (handle the) snapshot and transfer (the data)
if [[ -n "${elem_mode}" ]] && [[ ! "${elem_mode}" == "rsync" ]]; then
	mode_create=${elem_mode}; else
	mode_create=${elem_fs}
fi

mode_snapshot=${elem_fs}

if [[ ! -n "${elem_mode}" ]] && [[ ! "${elem_fs}" == "file" ]] || [[ "${elem_mode}" == "kvm" ]]; then
	mode_transfer=${elem_fs};
elif [[ "${elem_mode}" == "rsync" ]] || [[ "${elem_fs}" == "file" ]]; then
	mode_transfer=rsync
fi


##### rollback #####

# if rollback is set the source- and targetvariables have to be swapped
if [[ "${arg_snap_rollback}" == "set" ]]; then
	swap-rollback path_snap_source path_snap_target
	swap-rollback path_root_source path_root_target


	if [[ -n "${path_offset_source}" ]] || [[ -n "${path_offset_target}" ]]; then
		swap-rollback path_offset_source path_offset_target
	fi

	if [[ -n "${elem_server_source}" ]] ||  [[ -n "${elem_server_target}" ]]; then
		swap-rollback elem_server_source elem_server_target
		swap-rollback snap_location_source snap_location_target

		if [[ -n "${elem_port_source}" ]] ||  [[ -n "${elem_port_target}" ]]; then
			swap-rollback elem_port_source elem_port_target
		fi
	fi
fi


##### path conventions #####

# spaces in the directories are allowed but have to be escaped
check-path escape_space path_root_source
check-path escape_space path_root_target
check-path escape_space path_snap_source
check-path escape_space path_snap_target
# path_root needs to start with a slash and end without
check-path add_slash_start path_root_source
check-path rm_slash_end path_root_source
check-path add_slash_start path_root_target
check-path rm_slash_end path_root_target
# path_snap needs to end without slash
check-path rm_slash_end path_snap_source
check-path rm_slash_end path_snap_target

# if set, path_offset needs to start with a slash and end without
if [[ -n "${path_offset_source}" ]]; then
	check-path escape_space path_offset_source
	check-path add_slash_start path_offset_source
	check-path rm_slash_end path_offset_source

	# if mode_transfer is btrfs or zfs path_offset_source will be used as part of path_snap_source
	if [[ "${mode_transfer}" == "btrfs" ]] || [[ "${mode_transfer}" == "zfs" ]]; then
		path_snap_source="${path_snap_source}""${path_offset_source}"
		unset path_offset_source
	fi
fi

if [[ -n "${path_offset_target}" ]]; then
	check-path escape_space path_offset_target
	check-path add_slash_start path_offset_target
	check-path rm_slash_end path_offset_target

	# if mode_transfer is btrfs or zfs path_offset_target will be used as part of path_snap_target
	if [[ "${mode_transfer}" == "btrfs" ]] || [[ "${mode_transfer}" == "zfs" ]]; then
		path_snap_target="${path_snap_target}""${path_offset_target}"
		unset path_offset_target
	fi
fi

##### ports for rsync and ssh #####

if [[ -n "${elem_server_source}" ]]; then
	if [[ ! -n "${elem_port_source}" ]]; then
		elem_port_source=22
	fi
	# establish master connection for ssh on source. this will automatically close 1 minute after the script
	ssh-connect "${elem_port_source}" "${elem_server_source}"
	ssh_source="-S ~/.ssh/%C ${elem_server_source} -p ${elem_port_source}"
	export ssh_source elem_port_source

	if [[ "${snap_location_source}" == "direct" ]] || [[ "${snap_location_source}" == "local" ]]; then
		snap_location_remote_source=${elem_server_source}
		unset elem_server_source
		export snap_location_remote_source
	fi
fi

if [[ -n "${elem_server_target}" ]]; then
	if [[ ! -n "${elem_port_target}" ]]; then
		elem_port_target=22
	fi
	# establish master connection for ssh on target. this will automatically close 1 minute after the script
	ssh-connect "${elem_port_target}" "${elem_server_target}"
	ssh_target="-S ~/.ssh/%C ${elem_server_target} -p ${elem_port_target}"
	export ssh_target elem_port_target

	if [[ "${snap_location_target}" == "direct" ]] || [[ "${snap_location_target}" == "local" ]]; then
		snap_location_remote_target=${elem_server_target}
		unset elem_server_target
		export snap_location_remote_target
	fi
fi


##### snapshot limits #####

# the script expects an integer here. 0 means the snapshots are handled externally
if [[ ! -n "${snap_limit_source}" ]]; then
	snap_limit_source=0
fi

if [[ ! -n "${snap_limit_target}" ]]; then
	snap_limit_target=0
fi

# in these cases no snapshots should be created. so snap_limit has to be 0 and snap_list has to be unset
if [[ -n "${show_snapshots}" ]] || [[ -n "${arg_snap_rollback}" ]] || [[ -n "${arg_snap_multi}" ]]; then
	snap_limit_source=0
	snap_limit_target=0
	unset snap_list_source snap_list_target
	export snap_limit_source snap_limit_target
fi


##### add virtual snapshots #####
if ([[ "${show_snapvars}" == "set" ]] || [[ "${show_commands}" == "set" ]]) && ([[ "${snap_limit_source}" -ge 1 ]] || [[ -n "${snap_list_source}" ]]); then
		add_snapshot_source=set
		export add_snapshot_source
fi

if [[ ! "${show_snapshots}" == "set" ]] && ([[ "${snap_limit_target}" -ge 1 ]] || [[ -n "${snap_list_target}" ]]); then
	add_snapshot_target=set
	export add_snapshot_target
fi

##### logging #####

if [[ -n "${arg_snap_rollback}" ]] || [[ -n "${arg_snap_multi}" ]]; then
	unset  log_form log_mode log_usr log_dir log_server log_server_port
fi

if [[ -n "${log_mode}" ]]; then
	if [[ "${log_mode}" == "file" ]]; then
		if [[ -n "${log_usr}" ]]; then
			probe=$(echo "${log_usr}" | grep ":" || true)

			if [[ -n "${probe}" ]]; then
				if [[ -n "${log_server}" ]]; then
					echo "for remote logging the loguser mustn't contain the group" && exit 1
				fi; else

				if [[ -n "${log_server}" ]]; then
					log_usr="${log_usr}@"; else
					log_usr="${log_usr}:${log_usr}"
				fi
				export log_usr
			fi
		fi

		if [[ -n "${log_server}" ]]; then
			if [[ ! -n "${log_server_port}" ]]; then
				log_server_port=22
			fi
			log_server="${log_server} -p ${log_server_port}"
			export log_server
			unset log_server_port
		fi

		# log_dir has the same conventions as the paths
		check-path escape_space log_dir
		check-path add_slash_start log_dir
		check-path add_slash_end log_dir
		log_file_type=".txt"
	fi

	if [[ "${log_mode}" == "file" ]] && [[ ! -n "${log_usr}" ]]; then
		log_usr=root
		export log_usr
	fi

	log_file=${log_dir}${mode_snapshot}_diff-CURRENT_SYNC_NAME_SOURCE-${snap_date}${log_file_type}

	export log_file
	unset probe log_dir log_file_type
fi


##### define strings for snapname #####

# Defines the offset for the snapshot-comparison
snap_string="${snap_name}_${snap_date}"

if [[ "${mode_snapshot}" == "btrfs" ]] || [[ "${mode_snapshot}" == "file" ]] || [[ "${mode_snapshot}" == "mysql" ]]; then
	snap_string_separator="_";
elif [[ "${mode_snapshot}" == "zfs" ]] || [[ "${mode_snapshot}" == "kvm" ]]; then
	snap_string_separator="@"
fi


##### exports of variables which are created here #####
export mode_create mode_snapshot mode_transfer snap_string snap_string_separator path_snap_source path_snap_target path_root_source path_root_target

##### variable list. these will be picked up by debug #####
# import_fields = arg_snap_multi arg_snap_rollback elem_fs elem_mode elem_port_source elem_port_target elem_server_source elem_server_target log_dir log_mode log_server log_server_port log_usr mode_snapshot path_offset_source path_offset_target path_root_source path_root_target path_snap_source path_snap_target show_commands show_snapshots show_snapvars snap_date snap_limit_source snap_limit_target snap_list_source snap_list_target snap_location_source snap_location_target snap_name
# export_fields = add_snapshot_source add_snapshot_target elem_port_source elem_port_target elem_server_source elem_server_target log_file log_usr mode_create mode_snapshot mode_transfer path_offset_source path_offset_target path_root_source path_root_target path_snap_source path_snap_target snap_date snap_limit_source snap_limit_target snap_location_remote_source snap_location_remote_target snap_location_source snap_location_target snap_string snap_string_separator ssh_source ssh_target
