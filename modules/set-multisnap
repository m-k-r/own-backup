#!/bin/bash

# snapshots can contain spaces, set ifs to newline
IFSBAK=$IFS
IFS=$'\n'
snap_new_list_source=(${current_snap_shots_source})
snap_new_list_source_ts=(${current_snap_shots_source_ts})
snap_old_list_target_ts=(${current_snap_shots_target_ts})
snap_old_target_ts=${snap_old_list_target_ts[-1]}

# snap_old_target is always the last snpashot on target. so if not unset all snapshots up to snap_old_target are cut off
if [ ! -z "${snap_new_list_source[*]}" ] && [ ! "${snap_old_target}" == "unset" ]
	then	bb="0"
		if [ "${mode_transfer}" == "zfs" ]
			then	# to prevent an endless loop check if source_snap_new is newer then source_snap_old
				if [ "${snap_new_list_source_ts[-1]}" -le "${snap_old_target_ts}" ]
					then	exit 0
				fi

				# compare snap_new_list_source_ts and snap_old_list_target_ts and cut off all older snapshots
				# only timestamp is used. snap_old_target doesn't necessarily exist on source so the strings can't be matched
				while [ "${snap_new_list_source_ts[${bb}]}" -le "${snap_old_target_ts}" ]
				do	unset snap_new_list_source[${bb}]
					bb=$((${bb} + 1))
				done

			# for now timestamps are not applicable for btrfs, since there is now way to preserve the actual creation time of a snapshot
			# while it works fine under certain circumstances, it doesn't if snapshots are deleted, rolled back or copied in bulk
			# file has the limitation that there is no way to get an actual filelock
			# as a workaround instead of snap_old_target, snap_common_source is used as a reference point
			elif [ "${mode_transfer}" == "btrfs" ] || [ "${mode_transfer}" == "rsync" ]
				then	until [ "${snap_new_list_source[${bb}]}" == "${snap_common_source}" ]
					do	unset snap_new_list_source[${bb}]
						bb=$((${bb} + 1))
					done
					# snap_common_source still exists in snap_new_list_source
					unset snap_new_list_source[${bb}]
		fi
fi

# the wanted snapshots are filtered out through the given pattern.
# If this would be done earlier, the list of timestamps would have to be matched to the snapshots
# by recreating the array, in both cases the array keys are reset to beginn with 0
if [ ! -z "${snap_new_list_source[*]}" ] && [ ! "${arg_snap_multi}" == "all" ]
	then	snap_new_list_source=($(printf '%s\n' "${snap_new_list_source[@]}" | grep "${arg_snap_multi}" 2> /dev/null))
	else	snap_new_list_source=($(printf '%s\n' "${snap_new_list_source[@]}"))
fi

# if snap_new_list_source is empty now, there is nothing to do. this has to be exit 0 in case other sync_names are not empty
if [ -z "${snap_new_list_source[*]}" ]
	then	exit 0
fi


# from snap_new_list_source all other lists are build
# snap_common_list_source and snap_old_list_target have one element more than snap_new_list_source
snap_new_list_source_number=${#snap_new_list_source[@]}
snap_common_list_source=("${snap_common_source}" "${snap_new_list_source[@]}")
snap_old_list_target=(${snap_old_target} $(printf '%s\n' "${snap_new_list_source[@]}" | sed "s;"${current_snap_set_source}";"${current_snap_set_target}";g" 2> /dev/null))
# reset the ifs, otherwise ssh_target will be interpreted as one string for the servername (with space and port)
IFS=$IFSBAK
bb="0"

until [ "${bb}" -ge "${snap_new_list_source_number}" ]
do	snap_new_source=${snap_new_list_source[${bb}]}
	snap_common_source=${snap_common_list_source[${bb}]}
	snap_old_target=${snap_old_list_target[${bb}]}
	export snap_new_source snap_common_source snap_old_target

	# mode_transfer=rsync does not need snap_old_target unless logs are set, which is omitted in copying multiple snapshots
	if [ "${snap_old_target}" == "unset" ] || [ "${show_commands}" == "set" ] || [ "${mode_transfer}" == "rsync" ]
		then	probe=${snap_old_target}
		# this is strictly not necessary because the creation of snapshots is documented, but if something is going wrong, this prevents errors
		else	if [ "${mode_transfer}" == "zfs" ]
				then	if [ -n "${elem_server_target}" ]
						then	probe=$(ssh ${ssh_target} "zfs list \"${snap_old_target}\" 2> /dev/null" | tail -n +2 | awk '{ print $1 }')
						else	probe=$(zfs list "${snap_old_target}" 2> /dev/null | tail -n +2 | awk '{ print $1 }')
					fi

				elif [ "${mode_transfer}" == "btrfs" ]
					then	if [ -n "${elem_server_target}" ]
							then	probe=$(ssh ${ssh_target} "btrfs subvolume show \"${snap_old_target}\" 2> /dev/null" | head -1 | awk '{ print $1 }')
							else	probe=$(btrfs subvolume show "${snap_old_target}" 2> /dev/null | head -1 | awk '{ print $1 }')
						fi
			fi
	fi

	if [ "${probe}" == "${snap_old_target}" ]
		then	if [ "${mode_transfer}" == "zfs" ]
				then	${dir_modules}/copy-zfs

				elif [ "${mode_transfer}" == "btrfs" ]
					then	${dir_modules}/copy-btrfs

				elif [ "${mode_transfer}" == "rsync" ]
					then	${dir_modules}/copy-rsync
			fi

		else	echo "The Target ${snap_old_target} didn't exist and was ommited"
	fi
	bb=$((${bb} + 1))
done

##### variable list. these will be picked up by debug #####
# import_fields = mode_transfer elem_server_target ssh_target show_commands dir_modules arg_snap_multi current_snap_set_source current_snap_set_target current_snap_shots_source current_snap_shots_source_ts current_snap_shots_target_ts snap_common_source snap_old_target
# export_fields =
