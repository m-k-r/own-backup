#!/bin/bash

# ------------------------------- functions ------------------------------------

# if exit returns a non-zero value, show the apropriate error message and exit
function check-exit {
	exit_code=${?}
	if [[ ! "${exit_code}" == "0" ]]; then
		export exit_code module_current
		${dir_modules}/do-exit
		if [[ ! "${?}" == "0" ]]; then
			exit 1
		fi
	fi
}

function get-fields {
	if [[ "${module_current}" == "own-snapshot" ]]; then
		import_fields=oss_parameter
		export_fields=; else
		# get the fields from the module
		import_fields=$(awk -v condition1="import_fields" '$2 == condition1 { print $0 }' ${dir_modules}/${module_current} | cut -d " " -f 4-)
		export_fields=$(awk -v condition1="export_fields" '$2 == condition1 { print $0 }' ${dir_modules}/${module_current} | cut -d " " -f 4-)
	fi
}

# if an error occurs own-back creates a dump of the variables
function create-dump {
	debug_file=${dir_conf}/debug/${arg_element}_${name_current}_${current_side}_${module_current}.dump
	debug_dir=$(echo "${debug_file}" | rev | cut -d "/" -f 2- | rev)
	get-fields

	# print header to dump
	dump="element=\"${arg_element}\""$'\n'
	dump+="module_current=\"${module_current}\""$'\n'
	dump+="dir_modules=\"${dir_modules}\""$'\n'
	dump+="export_fields=\"${export_fields}\""$'\n'

	# print variables to dump
	for import_field in ${import_fields}
	do	line="${import_field}=\"${!import_field}\""
		dump+=${line}$'\n'
	done

	# print the variables to export
	dump+="export ${import_fields}"$'\n'

	# copy dump to file
	mkdir -p ${debug_dir} && chmod 400 ${debug_dir}
	echo "${dump}" | grep -v '^$' > ${debug_file}
	echo "a dump of the variables for ${module_current} has been written to ${debug_file}"
}

# used for debugging
function get-import {
	# get variables from element
	source ${element}

	# -t (target) parameter is in main script override_snap_date
	if [[ "${override_snap_date}" == "deb" ]]; then
		dir_modules=/usr/lib/own-backup/modules;
	elif [[ "${override_snap_date}" == "git" ]]; then
		dir_modules=/usr/local/own-backup/modules
	fi
	show_commands=set
	export show_commands

	printf -- "\n--------------- ${module_current} ---------------\n\n"
}

function check-module {
	if [[ "${module_current}" == "own-snapshot" ]]; then
		own-snapshot${oss_parameter}; else
		${dir_modules}/${module_current}
	fi
	check-exit
}

function export-variables {
	get-fields
	if [[ "${module_current}" == "own-snapshot" ]]; then
		unset element
		. own-snapshot${oss_parameter} > /dev/null; else
		. ${dir_modules}/${module_current} > /dev/null
	fi

	for export_field in ${export_fields}
	do	echo "${export_field} = ${!export_field}"
	done
}

function import-variables {
	get-fields
	for import_field in ${import_fields}
	do	echo "${import_field} = ${!import_field}"
	done
}

# ------------------------------ Main Script -----------------------------------

if [[ "${debug_mode}" == "${module_current}" ]] || [[ "${debug_mode}" == "all" ]]; then
	create-dump; else
	if [[ "${debug_mode}" == "check" ]]; then
	 	get-import
		check-module;
	elif [[ "${debug_mode}" == "show" ]]; then
		cat "${element}";
	elif [[ "${debug_mode}" == "export" ]]; then
		get-import
		export-variables;
	elif [[ "${debug_mode}" == "import" ]]; then
		get-import
		import-variables
	fi
fi

##### variable list. these will be picked up by debug #####
# import_fields = exit_code dir_modules dir_conf module_current element
# export_fields =
