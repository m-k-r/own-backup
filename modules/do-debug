#!/bin/bash
#
# -----------------------------------------------------------------------------
#
# Author:	Marcel Keller (m-k-r)
# Usage:	debug script for modules
# License:	GPLv3 http://www.gnu.org/licenses/gpl-3.0
#
# ----------------------------- Global Variables ------------------------------

version=1.0
usage="usage: own-backup -d [parameter]

 -c	set of variables. name of the config file without '.conf' at the end
 -d	debug level: create, check, show
 -m	module-name for override. otherwise the module-name from the dump will be used
 -t	target: either deb or git (default)
 -v	show version of this script
 -h	this page"
dir_root=/usr/local/own-backup
mode_supported="directory file kvm mysql pgsql rsync"
fs_supported="btrfs zfs file"
show_commands=set
export show_commands

# --------------------------------- Parameter ----------------------------------

if [ "$#" == "0" ]
	then	echo "${usage}" && exit 0
fi

while getopts ":c:d:m:t:vh" opt; do
	case ${opt} in
		c)	config=$OPTARG
			;;
		d)	debug=$OPTARG
			;;
		m)	module_command=$OPTARG
			;;
		t)	target=$OPTARG
			;;
		v)	echo "${version}"
			exit 0
			;;
		h)	echo "${usage}"
			exit 0
			;;
		?)	echo "Invalid option: -$OPTARG" >&2 && exit 1
			;;
	esac
done



##### define functions #####

# if exit returns a non-zero value, show the apropriate error message and exit
function check-exit {
	exit_code=${?}
	if [ ! "${exit_code}" == "0" ]
		then	export exit_code && ${dir_modules}/do-exit
			if [ ! "${?}" == "0" ]
				then	exit 1
			fi
	fi
}

# if an error occurs own-back creates a dump of the variables
function create-dump {
	debug_file=${dir_conf}/debug/${config}_${name_current}_${side_current}_${module_current}.conf
	debug_dir=$(echo ${debug_file} | rev | cut -d "/" -f 2- | rev)

	if [ "${module_current}" == "own-snapshot" ]
		then	import_fields=oss_parameter
			export_fields=
		else	# get the fields from the module
			import_fields=$(awk -v condition1="import_fields" '$2 == condition1 { print $0 }' ${dir_modules}/${module_current} | cut -d " " -f 4-)
			export_fields=$(awk -v condition1="export_fields" '$2 == condition1 { print $0 }' ${dir_modules}/${module_current} | cut -d " " -f 4-)
	fi

	# print header to dump
	dump="config=\"${config}\""$'\n'
	dump+="module=\"${module_current}\""$'\n'
	dump+="export_fields=\"${export_fields}\""$'\n'

	# print variables to dump
	for import_field in ${import_fields}
	do	line="${import_field}=\"${!import_field}\""
		dump+=${line}$'\n'
	done

	# print the variables to export
	dump+="export ${import_fields}"$'\n'

	# copy dump to file
	mkdir -p ${debug_dir} && chmod 400 ${debug_dir}
	echo "${dump}" | grep -v '^$' > ${debug_file}
	echo "a dump of the variables for ${module_current} has been written to ${debug_file}"
}

# used for debugging
function check-module {
	# get variables from config
	source ${conf}

	if [ -n "${module_command}" ]
		then	module_current=${module}
			export module_current
		else	module_command=${module}
	fi

	printf -- "\n--------------- ${module_command} ---------------\n\n"

	# test module
	if [ "${module_command}" == "own-snapshot" ]
		then	output=$(own-snapshot${oss_parameter})
		else	output=$(${dir_modules}/${module_command})
	fi

	if [ -n "${output}" ]
		then	if [ -n "${export_fields}" ]
				then	echo "export_fields are ${export_fields}"
				else	echo "there is output while no export_fields are defined"
			fi

		else	if [ -n "${export_fields}" ]
				then	echo "the export_fields ${export_fields} are defined but there is no output"
				else	echo "there is no output and export fields are defined"
			fi
	fi

	if [ "${module_command}" == "own-snapshot" ]
		then	own-snapshot${oss_parameter}
		else	${dir_modules}/${module_command}
	fi
	check-exit

	# at this point there is no problem that exits the script
	printf -- "\n--------------- ${module_command} ---------------\n"
	echo "no problem found"
}

if [ "${debug}" == "create" ]
	then	create-dump
	else	if [ "${target}" == "deb" ]
			then	dir_root=/usr/lib/own-backup
		fi

		dir_modules=${dir_root}/modules
		dir_conf=/etc/own-backup/debug
		conf=${dir_conf}/${config}.conf
		probe=$(find ${conf} 2>&1)

		# check if config file exists
		if [ ! "${probe}" == "${conf}" ]
			then	echo "the config-file does not exist" && exit 1
		fi

		if [ "${debug}" == "check" ]
		 	then	check-module
			elif [ "${debug}" == "show" ]
				then	cat "${conf}"
		fi
fi

##### variable list. these will be picked up by debug #####
# import_fields = exit_code dir_modules dir_conf module_current module_command config conf
# export_fields =
