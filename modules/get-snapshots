#!/bin/bash

# sorting snapshots is a more complicated topic. there are generally two ways to order the snapshots with their specific drawbacks:
# the datestring in the snapshot name or the creation time
#
# for the datestring in filename all snapshot need to have a datestring in the same format
# so if there are snapshots with different datestring or without one, the sorting isn't valid
#
# zfs, btrfs and file only show the minute of the creation time not the seconds.
# file (unix) doesn't store the creation time of a file, just the time of the last modification
# if there are several snapshots within a minute or a file is altered, the sorting isn't valid
#
# this script uses a hybrid of both: it checks if a parsable datestring exists
# if thats the case the datestring is converted to unix timestamp
# if not, it falls back to the creation time with all its drawbacks
#
# the datestring has to be YYYYxMMxDDxxHHnMM(xSS.nanoseconds)
# where
# x is one or zero non-digit charater
# . is a literal dot
# and the content of the parenthesis is optional
#
# this circumvents another problem:
# for zfs timestamps on source and target are the same
# for btrfs there is now way to preserve the actual creation time of a snapshot
# a relationship between source and target snapshots could be established with the received uuid, but this wouldn't work
# if another fs like a cold backup is used or if the snapshot on source is snapshotted
# if the script assumes that a parsable datestring exists and it is on both source and target the same, the derived timestamps
# can be used to determine the last common snapshot between source and target

# ------------------------------- Functions ------------------------------------

function get-timestamp () {
	local probe digits datestring timestamp

	if [[ "${mode_snapshot}" == "zfs" ]]; then
		probe=$(echo "${1}" | rev | cut -d "@" -f 1 | rev); else
		probe=$(echo "${1}" | rev | cut -d "/" -f 1 | rev)
	fi
	digits=$(echo "${probe}" | grep -Eo '[0-9]{4}[^0-9]?[0-9]{2}[^0-9]?[0-9]{2}[^0-9]?[^0-9]?[0-9]{2}[^0-9]?[0-9]{2}[^0-9]?[0-9]?[0-9]?\.?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?$' | sed 's/[^0-9]*//g')

	if [[ -n "${digits}" ]]; then
		# year-month-day hour:minute
		datestring="${digits:0:4}-${digits:4:2}-${digits:6:2} ${digits:8:2}:${digits:10:2}"
		if [[ -n "${digits:12:2}" ]]; then
			# seconds, optional
			datestring+=":${digits:12:2}"
		fi

		if [[ -n "${digits:14:9}" ]]; then
			# subseconds, optional
			datestring+=".${digits:14:9}"
		fi
		timestamp=$(LC_TIME=C date --date="${datestring}" +'%s')
		echo "${timestamp}"
	fi
}

# get snapshots for source  and target
if [[ "${mode_snapshot}" == "zfs" ]]; then
	if [[ -n "${current_server}" ]]; then
		snap_shots=$(ssh ${current_ssh} "zfs get -Ho value -r name \"{current_snap_set}\"" | tail -n +2); else
		snap_shots=$(zfs get -Ho value -r name "${current_snap_set}" | tail -n +2)
	fi;

elif [[ "${mode_snapshot}" == "btrfs" ]]; then
	if [[ -n "${current_server}" ]]; then
		snap_shots=$(ssh ${current_ssh} "find \"${current_snap_set}\"_* -maxdepth 0 2> /dev/null"); else
		snap_shots=$(find "${current_snap_set}"_* -maxdepth 0 2> /dev/null)
	fi;

elif [[ "${mode_snapshot}" == "file" ]]; then
	if [[ -n "${current_server}" ]]; then
		snap_shots=$(ssh ${current_ssh} "find \"${current_snap_set}\"_*${current_snap_file_type} -maxdepth 0 2> /dev/null"); else
		snap_shots=$(find "${current_snap_set}"_*${current_snap_file_type} -maxdepth 0 2> /dev/null)
	fi
fi

for snap_shot in ${snap_shots}
do	if [[ "${mode_snapshot}" == "zfs" ]]; then
		snap_shot_timestamp=$(get-timestamp "${snap_shot}")~datestring
		if [[ "${snap_shot_timestamp}" == "~datestring" ]]; then
			if [[ -n "${current_server}" ]]; then
				snap_shot_timestamp=$(ssh ${current_ssh} "LC_TIME=C zfs get -Ho value creation \"${snap_shot}\""); else
				snap_shot_timestamp=$(LC_TIME=C zfs get -Ho value creation "${snap_shot}")
			fi
			snap_shot_timestamp=$(date --date="${snap_shot_timestamp}" +'%s')~timestamp
		fi;

	elif [[ "${mode_snapshot}" == "btrfs" ]]; then
		snap_shot_timestamp=$(get-timestamp "${snap_shot}")~datestring
		if [[ "${snap_shot_timestamp}" == "~datestring" ]]; then
			if [[ -n "${current_server}" ]]; then
				snap_shot_timestamp=$(ssh ${current_ssh} "LC_TIME=C btrfs subvolume show \"${snap_shot}\"" | grep -i "Creation Time" | awk ' { $1=$2="" ; print } '); else
				snap_shot_timestamp=$(LC_TIME=C btrfs subvolume show "${snap_shot}" | grep -i "Creation Time" | awk ' { $1=$2="" ; print } ')
			fi
			snap_shot_timestamp=$(date --date="${snap_shot_timestamp}" +'%s')~timestamp
		fi;

	elif [[ "${mode_snapshot}" == "file" ]]; then
		# the snapsstring has to be the end. the so the filetype has to be removed
		if [[ -n "${current_snap_file_type}" ]]; then
			# only remove the first match from the end
			snap_shot_stripped=$(echo "${snap_shot}" | rev | "s/$(echo ${current_snap_file_type}  rev)//" | rev); else
			snap_shot_stripped=${snap_shot}
		fi

		snap_shot_timestamp=$(get-timestamp "${snap_shot_stripped}")~datestring
		if [[ "${snap_shot_timestamp}" == "~datestring" ]]; then
			if [[ -n "${current_server}" ]]; then
				snap_shot_timestamp=$(ssh ${current_ssh} "LC_TIME=C stat -c %Z \"${snap_shot}\"")~timestamp; else
				snap_shot_timestamp=$(LC_TIME=C stat -c %Z "${snap_shot}")~timestamp
			fi
		fi
	fi
	snap_shots=$(echo "${snap_shots}" | sed "s;"${snap_shot}";&~${snap_shot_timestamp};g" 2> /dev/null)
done
snap_shots=$(echo "${snap_shots}" | sort -t '~' -k2)

# if output is set, there is no current snapshot, for that a virtual snapshot has to be created
if ([[ "${current_side}" == "source" ]] && [[ "${add_snapshot_source}" == "set" ]]) || ([[ "${current_side}" == "target" ]] && [[ "${add_snapshot_target}" == "set" ]]); then
	snap_shot_virtual=${current_snap_set}${snap_string_separator}${snap_string}${current_snap_file_type}~$(date +'%s')~virtual
	if [[ -n "${snap_shots}" ]]; then
		snap_shots+=$'\n'${snap_shot_virtual}; else
		snap_shots=${snap_shot_virtual}
	fi
fi

echo "${snap_shots}"

##### variable list. these will be picked up by debug #####
# import_fields = current_side mode_snapshot current_server current_ssh add_snapshot_source add_snapshot_target snap_string snap_string_separator current_snap_root current_snap_set current_snap_file_type
# export_fields = snap_shots
