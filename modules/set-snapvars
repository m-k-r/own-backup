#!/bin/bash

# 3 Snapshots are needed:
# snap_new_source - this is always the newest snapshot on source
# snap_common_source - this is the last common snapshot on source and target. It is needed for btrfs and zfs send and file for copying multiple snapshots
# snap_old_target - this is always the newest snapshot on target. It is needed for zfs rollback and log
snap_new_source=${current_snap_shots_strict_source##*$'\n'}

if [[ "${mode_transfer}" == "zfs" ]] || [[ "${mode_transfer}" == "btrfs" ]] || ([[ "${mode_transfer}" == "rsync" ]] && [[ -n "${arg_snap_multi}" ]]); then
	# if mode_transfer is either zfs or btrfs snapshots on source have to exist
	if [[ ! -n "${snap_new_source}" ]]; then
		exit 88
	fi

	# if snapshots are each <2 the loop would fail. one snapshot on target is virtual and has to be omitted
	# the exception is if multisnap or rollback is set. then the snapshots on target have to be at least 1
	if ([[  "${current_snap_number_target}" -lt 2 ]] && [[ "${add_snapshot_target}" == "set" ]]) || [[  "${current_snap_number_target}" -lt 1 ]] || [[ "${current_snap_number_source}" -lt 2 ]]; then
		snap_common_source=unset
	fi

	# if mode_transfer=zfs or the timestamp derives from the datestring, the timestamp can be trusted
	if [[ "${mode_transfer}" == "zfs" ]] || ([[ "${current_snap_shots_quality_source}" == "datestring" ]] && [[ "${current_snap_shots_quality_target}" == "datestring" ]]); then
		timestamp_required=set
	fi; else

	# if mode_snapshot is zfs/btrfs and mode_transfer differs a snap_common_source wouldn't necessarily exist and isn't required
	snap_common_source=unset
fi

# if snap_common_source isn't set to unset it is determined here
if [[ ! "${snap_common_source}" == "unset" ]]; then
	# the snapshots can contain spaces. since the strings are counted the spaces have to be replaced
	IFSBAK=$IFS
	IFS=$'\n'
	snap_shots_source=(${current_snap_shots_source})
	snap_shots_source_ts=(${current_snap_shots_source_ts})
	snap_shots_target_ts=(${current_snap_shots_target_ts})
	IFS=$IFSBAK
	bb=$((${current_snap_number_source} - 1))

	# the last snapshot on target could be virtual. this is filtered out by checking if it contains the current snap_string
	while [[ "${bb}" -ge 0 ]]
	do	if [[ "${mode_transfer}" == "zfs" ]]; then
			probe_string=$(echo "${snap_shots_source[bb]}" | rev | cut -d "@" -f 1 | rev); else
			probe_string=$(echo "${snap_shots_source[bb]}" | rev | cut -d "/" -f 1 | rev)
		fi
		string_matching=$(echo "${current_snap_shots_target}" | grep -n "${probe_string}" | grep -Eo '^[^:]+')

		if [[ -n "${string_matching}" ]]; then
			if [[ -n "$(echo ${probe_string} | grep ${snap_string})" ]]; then
				snap_common_source=newest
				bb=$((${bb} - 1))
				continue
			fi
			# for all modi there can only be one snapshot with the same name. so this case don't has to be dealt with
			if [[ "${snap_shots_source_ts[bb]}" == "${snap_shots_target_ts[$((${string_matching} - 1))]}" ]] || [[ ! "${timestamp_required}" == "set" ]]; then
				snap_common_source=${snap_shots_source[bb]}
				break
			fi
		fi
		bb=$((${bb} - 1))
	done
fi

# if at this point snap_common_source does not exist, there is no common snapshot and source and target
if [[ ! -n "${snap_common_source}" ]]; then
	exit 89
fi

# snapold target is the last snapshot if no virtual snapshot exists, else it it the second last
if [[ ! "${add_snapshot_target}" == "set" ]] && [[ "${current_snap_number_target}" -ge 1 ]]; then
	snap_old_target=${current_snap_shots_target##*$'\n'};
elif [[ "${current_snap_number_target}" -ge 2 ]]; then
	snap_old_target=$(echo "${current_snap_shots_target}" | sed -n '${x;p};h'); else
	snap_old_target=unset
fi

echo "${snap_new_source}~${snap_common_source}~${snap_old_target}"

##### variable list. these will be picked up by debug #####
# import_fields = mode_transfer arg_snap_multi add_snapshot_target current_snap_shots_source current_snap_shots_source_ts current_snap_shots_quality_source current_snap_number_source current_snap_shots_strict_source current_snap_shots_target current_snap_shots_target_ts current_snap_shots_quality_target current_snap_number_target snap_string
# export_fields = snap_new_source snap_common_source snap_old_target
