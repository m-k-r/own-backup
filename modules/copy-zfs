#!/bin/bash

# For output the script uses pv which has to be between send and receive
if	[ "${show_output}" == "set" ]
		then	output=" | pv"
fi

# zfs send does not need snap_old_target, zfs send incremental does. sometimes without rollback it fails
if	[ -n "${snap_old_target}" ] && [ ! "${snap_old_target}" == "unset" ]
	then	# unlike the old script we don't check for incremential before we check if $snap_old_target exists.
			# so $snap_old_target can be missing but the snap_set_target_current exist. This scenario must be dealt with in the main script.
			if	[ ! "${show_commands}" == "set" ]
				then	if	[ -n "${config_server_target}" ]
							then	ssh ${config_server_target}${config_port_target} "zfs rollback ${snap_old_target}"
							else	zfs rollback ${snap_old_target}
						fi
			fi

			# incremental send/receive
			if	[ -n "${config_server_source}" ]
				then	command1="ssh ${config_server_source}${config_port_source} zfs send -i ${snap_common_source} ${snap_new_source}${output}"
				else	command1="zfs send -i ${snap_common_source} ${snap_new_source}${output}"
			fi

	else	# zfs send in case syncname does not exist on targetpool
			if	[ -n "${config_server_target}" ]
				then	command1="ssh ${sourceserver}${config_port_source} zfs send ${snap_new_source}${output}"
				else	command1="zfs send ${snap_new_source}${output}"
			fi
fi

if	[ -n "${config_server_target}" ]
	then	command2="ssh ${config_server_target}${config_port_target} zfs recv ${snap_set_target_current}"
	else	command2="zfs recv ${snap_set_target_current}"
fi

if	[ "${show_commands}" == "set" ]
	then	echo "${command1} | ${command2}"
	else	eval ${command1} | ${command2}
fi