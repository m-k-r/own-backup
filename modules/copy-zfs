#!/bin/bash

# For output the script uses pv which has to be between send and receive
if [ "${show_progress}" == "set" ] && [ ! "${show_commands}" == "set" ]
	then	progress=" | pv"
fi

# zfs send does not need snap_old_target, zfs send incremental does. sometimes without rollback it fails
if [ -n "${snap_old_target}" ] && [ ! "${snap_old_target}" == "unset" ]
	then	# unlike the old script we don't check for incremential before we check if $snap_old_target exists.
		# so $snap_old_target can be missing but the snap_set_target_current exist. This scenario must be dealt with in the main script.
		if [ ! "${show_commands}" == "set" ]
			then	if [ -n "${config_server_target}" ]
					then	ssh ${ssh_target} "zfs rollback ${snap_old_target}"
					else	zfs rollback ${snap_old_target}
				fi
		fi

		# incremental send/receive
		if [ -n "${config_server_source}" ]
			then	command1="ssh ${ssh_source} zfs send -i ${snap_common_source} ${snap_new_source}${progress}"
			else	command1="zfs send -i ${snap_common_source} ${snap_new_source}${progress}"
		fi

	else	# zfs send in case syncname does not exist on targetpool
		if [ -n "${config_server_source}" ]
			then	command1="ssh ${ssh_source} zfs send ${snap_new_source}${progress}"
			else	command1="zfs send ${snap_new_source}${progress}"
		fi
fi

if [ -n "${config_server_target}" ]
	then	command2="ssh ${ssh_target} zfs recv ${snap_set_target_current}"
	else	command2="zfs recv ${snap_set_target_current}"
fi

if [ "${show_commands}" == "set" ]
	then	echo "${command1} | ${command2}"
	else	eval ${command1} | ${command2}
fi

##### variable list. these will be picked up by debug #####
# import_fields = show_commands config_server_source ssh_source config_server_target ssh_target show_progress snap_new_source snap_common_source snap_old_target snap_set_target_current
# export_fields =
