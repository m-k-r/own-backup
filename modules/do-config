#!/bin/bash

# ----------------------------- Global Variables -------------------------------

version_list=(1.0 1.1 1.2)
dir_element=${dir_conf}/backup
dir_upgrade=${dir_conf}/upgrade
dir_job=${dir_conf}/job
dir_debug=${dir_conf}/debug
dir_conf_offset=$(($(echo "${dir_conf}" | awk -F '/' '{print NF}') + 1))
dir_element_offset=$(($(echo "${dir_element}" | awk -F '/' '{print NF}') + 1))

# ------------------------------- functions ------------------------------------

function do-initial {
	echo "create initial structure in ${dir_conf}"
	mkdir -p ${dir_upgrade} ${dir_element} ${dir_job} ${dir_debug}
	chmod 400 ${dir_upgrade} ${dir_element} ${dir_job} ${dir_debug}
}

function do-backup {
	# check if the element has already be backuped by this script (for example if more then one version is upgraded)
	probe=$(echo "${elements_backuped}" | grep ${element_matching})

	if [[ -z "${probe}" ]]; then
		# check if the element is in a subdirectory
		probe=$(echo "${element_matching}" | grep "/")

		if [[ -n "${probe}" ]]; then
			mkdir -p ${dir_upgrade}/$(echo "${element_matching}" | rev | cut -d "/" -f 2- | rev)
		fi

		if [[ "${version_upgrade}" == "1.0" ]]; then
			rsync -a ${dir_conf}/"${element_matching}".conf ${dir_upgrade}/"${element_matching}".conf; else
			rsync -a ${dir_element}/"${element_matching}".bak ${dir_upgrade}/"${element_matching}".bak
		fi

		elements_backuped=${elements_backuped}$'\n'${element_matching}
	fi
}

function upgrade-framework {
	bb="0"

	for version_upgrade in ${version_list[@]}
	do	echo "----------------------- search for version ${version_upgrade} ------------------------"

		bb_next=$((${bb} + 1))
		if [[ -n ${version_list[${bb_next}]} ]]; then
			version_next=${version_list[${bb_next}]}
		fi

		if [[ "${version_upgrade}" == "1.0"  ]]; then
			elements=$(find ${dir_conf}/ | grep ".conf" | egrep -v "${dir_conf}/debug/" | egrep -v "${dir_conf}/templates" | egrep -v "${dir_element}" | egrep -v "${dir_upgrade}")
			offset=${dir_conf_offset}; else
			elements=$(find ${dir_element}/ | grep ".bak")
			offset=${dir_element_offset}
		fi

		if [[ -n "${elements}" ]]; then
			for element in ${elements}
			do	version_element=$(awk -v condition1="version" '$1 == condition1 { print $3 }' ${element})

				if [ "${version_element}" == "${version_upgrade}" ]; then
					elements_matching+=$(echo "${element}" | cut -d "/" -f ${offset}- | rev | cut -d "." -f 2- | rev)$'\n'; else
					elements_nonmatching+=$(echo "${element}" | cut -d "/" -f ${offset}- | rev | cut -d "." -f 2- | rev)$'\n'
				fi
			done

			if [[ -n "${elements_matching}" ]]; then
				elements_matching=$(echo "${elements_matching}" | grep -v '^$')
				elements_matching_number=$(echo "${elements_matching}"| awk 'END{print NR}')
				echo "found ${elements_matching_number} elements with version ${version_upgrade}"

				if [[ -n "${version_next}" ]]; then
					# make actual changes to the element
					eval upgrade${version_next}
					echo "${elements_matching_number} elements upgraded to version ${version_next}:"
					echo "${elements_matching}"; else
					echo "no newer version to upgrade. have fun"
				fi; else
				echo "no matching version found"
			fi; else echo "no element found"
		fi
		unset version_next elements elements_matching elements_nonmatching
		bb=$((${bb} + 1))
	done
}

function upgrade1.1 {
	do-initial
	for element_matching in ${elements_matching}
	do	do-backup

		# probe is set by do-backup
		if [[ -n "${probe}" ]]; then
			mkdir -p ${dir_element}/$(echo "${element_matching}" | rev | cut -d "/" -f 2- | rev)
		fi

		# copy the elements to the new directory
		rsync -a ${dir_conf}/"${element_matching}".conf ${dir_element}/"${element_matching}".bak
		sed -i "s;Source-, Targetserver, Ports, Mode, Filesystem and general Options;General Options, Source- and Targetserver, Ports, Mode and Filesystem;g" ${dir_element}/"${element_matching}".bak 2> /dev/null
		sed -i "s;Source- and Targetdirectories/datastets and specific options for modes and filesystems;Source- and Targetpaths. ZFS doesn't read Root and Offset is Optional;g" ${dir_element}/"${element_matching}".bak 2> /dev/null
		sed -i "s;Snapshot Name, Dateformat, Name of the Snapshotlist and Number to keep. If one is 0, inkremential send/receive won't work if snapshots are not handled by another script;Snapshot Name, Dateformat, Name of the Snapshotlist or Number to keep and Remote Options;g" ${dir_element}/"${element_matching}".bak 2> /dev/null
		sed -i "s;Syncdataoptions like Synclist, Names, Su- and Prefixes and VMID. Each is treated like an array;Syncoptions like Synclist or Name, Su- and Prefixes and VMID. Each is treated like an array;g" ${dir_element}/"${element_matching}".bak 2> /dev/null
		sed -i "s;version = 1.0;version = 1.1;g" ${dir_element}/"${element_matching}".bak 2> /dev/null
		rm -f ${dir_conf}/"${element_matching}".conf
	done

	# prior to version 1.0 there were no versions. so very old elements may not be parsed to new versions
	elements_nonmatching=$(echo "${elements_nonmatching}" | grep -v '^$')
	elements_nonmatching_number=$(echo "${elements_nonmatching}"| awk 'END{print NR}')
	if [[ -n "${elements_nonmatching}" ]]; then
		echo "${elements_matching_number} elements upgraded to version ${version_next}:"
		echo "${elements_matching}"
		echo "please check the remaining ${elements_nonmatching_number} invalid elements:"
		echo "${elements_nonmatching}"
		exit 0
	fi
}

function upgrade1.2 {
	for element_matching in ${elements_matching}
	do	do-backup
		sed -i "s;logdirectory =;logpath =;g" ${dir_element}/"${element_matching}".bak 2> /dev/null
		sed -i "s;snapshot-directory (source) =;snapshot-path (source) =;g" ${dir_element}/"${element_matching}".bak 2> /dev/null
		sed -i "s;snapshot-directory (target) =;snapshot-path (target) =;g" ${dir_element}/"${element_matching}".bak 2> /dev/null
		sed -i "s;root-directory (source) =;root-path (source) =;g" ${dir_element}/"${element_matching}".bak 2> /dev/null
		sed -i "s;root-directory (target) =;root-path (target) =;g" ${dir_element}/"${element_matching}".bak 2> /dev/null
		sed -i "s;offset-directory (source) =;offset-path (source) =;g" ${dir_element}/"${element_matching}".bak 2> /dev/null
		sed -i "s;offset-directory (target) =;offset-path (target) =;g" ${dir_element}/"${element_matching}".bak 2> /dev/null
		sed -i "s;version = 1.1;version = 1.2;g" ${dir_element}/"${element_matching}".bak 2> /dev/null
	done
}

# ------------------------------ Main Script -----------------------------------

if [[ "${arg_config}" == "upgrade" ]]; then
	upgrade-framework;
elif [[ "${arg_config}" == "initial" ]]; then
	do-initial; else
	echo "nothing to do" && exit 0
fi

##### variable list. these will be picked up by debug #####
# import_fields = arg_config dir_conf
# export_fields =
