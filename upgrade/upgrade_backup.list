# ----------------------------- Global Variables -------------------------------

version_list=(1.0 1.1 1.2 1.3)
upgrade_complete="1.0 1.1"

# --------------------------------- Upgrades -----------------------------------

function upgrade1.3 {
	# save custom settings
	log_server=$(sed -n '/logserver =/p' ${dir_element}/"${element_matching}"${file_extension} 2> /dev/null)
	log_path=$(sed -n '/logpath =/p' ${dir_element}/"${element_matching}"${file_extension} 2> /dev/null)
	log_usr=$(sed -n '/loguser =/p' ${dir_element}/"${element_matching}"${file_extension} 2> /dev/null)

	# delete old settings
	sed -i '/logserver =/d' ${dir_element}/"${element_matching}"${file_extension} 2> /dev/null
	sed -i '/logpath =/d' ${dir_element}/"${element_matching}"${file_extension} 2> /dev/null
	sed -i '/loguser =/d' ${dir_element}/"${element_matching}"${file_extension} 2> /dev/null

	# get new settings
	if [[ ! "${log_path}" == "logpath =" ]]; then
		log_form="logform = list"
		log_mode="logmode = file"; else
		log_form="logform ="
		log_mode="logmode ="
	fi

	# write new settings to element
	sed -i "s;# Logoptions;# Logoptions\n${log_form}\n${log_mode}\n${log_usr}\n${log_path}\n${log_server};g" ${dir_element}/"${element_matching}"${file_extension} 2> /dev/null
	sed -i "s;version = 1.2;version = 1.3;g" ${dir_element}/"${element_matching}"${file_extension} 2> /dev/null
}

function upgrade1.2 {
	sed -i "s;logdirectory =;logpath =;g" ${dir_element}/"${element_matching}"${file_extension} 2> /dev/null
	sed -i "s;snapshot-directory (source) =;snapshot-path (source) =;g" ${dir_element}/"${element_matching}"${file_extension} 2> /dev/null
	sed -i "s;snapshot-directory (target) =;snapshot-path (target) =;g" ${dir_element}/"${element_matching}"${file_extension} 2> /dev/null
	sed -i "s;root-directory (source) =;root-path (source) =;g" ${dir_element}/"${element_matching}"${file_extension} 2> /dev/null
	sed -i "s;root-directory (target) =;root-path (target) =;g" ${dir_element}/"${element_matching}"${file_extension} 2> /dev/null
	sed -i "s;offset-directory (source) =;offset-path (source) =;g" ${dir_element}/"${element_matching}"${file_extension} 2> /dev/null
	sed -i "s;offset-directory (target) =;offset-path (target) =;g" ${dir_element}/"${element_matching}"${file_extension} 2> /dev/null
	sed -i "s;version = 1.1;version = 1.2;g" ${dir_element}/"${element_matching}"${file_extension} 2> /dev/null
}

function upgrade1.1 {
	do-initial
	for element_matching in ${elements_matching}
	do	do-backup

		# probe is set by do-backup
		if [[ -n "${probe}" ]]; then
			mkdir -p ${dir_element}/$(echo "${element_matching}" | rev | cut -d "/" -f 2- | rev)
		fi

		# copy the elements to the new directory
		rsync -a ${dir_conf}/"${element_matching}".conf ${dir_element}/"${element_matching}"${file_extension}
		sed -i "s;Source-, Targetserver, Ports, Mode, Filesystem and general Options;General Options, Source- and Targetserver, Ports, Mode and Filesystem;g" ${dir_element}/"${element_matching}"${file_extension} 2> /dev/null
		sed -i "s;Source- and Targetdirectories/datastets and specific options for modes and filesystems;Source- and Targetpaths. ZFS doesn't read Root and Offset is Optional;g" ${dir_element}/"${element_matching}"${file_extension} 2> /dev/null
		sed -i "s;Snapshot Name, Dateformat, Name of the Snapshotlist and Number to keep. If one is 0, inkremential send/receive won't work if snapshots are not handled by another script;Snapshot Name, Dateformat, Name of the Snapshotlist or Number to keep and Remote Options;g" ${dir_element}/"${element_matching}"${file_extension} 2> /dev/null
		sed -i "s;Syncdataoptions like Synclist, Names, Su- and Prefixes and VMID. Each is treated like an array;Syncoptions like Synclist or Name, Su- and Prefixes and VMID. Each is treated like an array;g" ${dir_element}/"${element_matching}"${file_extension} 2> /dev/null
		sed -i "s;version = 1.0;version = 1.1;g" ${dir_element}/"${element_matching}"${file_extension} 2> /dev/null
		rm -f ${dir_conf}/"${element_matching}".conf
	done

	echo "${elements_matching_number} element(s) upgraded to version ${version_next}:"
	echo "${elements_matching}"
}

function upgrade1.0 {
	echo "there is no upgrade path. please check the ${elements_matching_number} invalid element(s):"
	echo "${elements_matching}"
}
