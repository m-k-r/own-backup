#!/bin/bash
#
# ------------------------------------------------------------------------------
#
# Author:	Marcel Keller (m-k-r)
# Usage:	creates jobs and elements to backup btrfs, zfs, file, directory, mysql and kvm to other disk or server
# License:	GPLv3 http://www.gnu.org/licenses/gpl-3.0
#
# ----------------------------- Global Variables -------------------------------

version=1.1
usage_main="usage: own-backup [parameter]

 -c	create initial config-directories, upgrade elements, create and change elements and jobs (not yet implemented)
 -d	debug: check or show export- and importvariables of a dump, or create a dump. create can be all(default) or a specific module
 -e	name of the element without '.bak'at the end
 -f	overrides the frequency in element for source and target
 -g	overrides the target for snapshot in element
 -j	name of the job without '.job' at the end
 -m	copies multiple snapshots instead of the last. valid: all or a restriction like 'daily' for all snapshots containing daily
 -n	overrides limit for snapshots to keep. has to be integer and source and target are separated by ':' like '5:5'
 -o	output: commands, datasets, snapshots, snapvars, full
 -r	rollback. Source and target are swapped. No new snapshots are created
 -s	overrides 'snapshotformat (name)' in element
 -t	overrides the date
 -v	show version of this script
 -h	this page"
usage_debug="usage: own-backup -d [parameter]

 -e	name of the dump file without '.dump' at the end
 -d	debug level: create(:${module_name}), check, export or import
 -t	target: either deb or git
 -h	this page"
dir_root=/usr/local/own-backup
dir_modules=${dir_root}/modules
dir_conf=/etc/own-backup
supported_mode="file kvm mysql pgsql rsync"
supported_fs="btrfs zfs file"
supported_snap_location="server ssh local direct"
supported_log_form="raw list report"
supported_debug="create check show import export"
supported_element_version=1.3

# ------------------------------- Parameter ------------------------------------

if [[ "$#" == "0" ]]; then
	echo "${usage}" && exit 0
fi

while getopts ":c:d:e:f:g:j:m:n:o:rs:t:vh" opt; do
	case ${opt} in
		c)	arg_config=$OPTARG
			;;
		d)	arg_debug=$OPTARG
			;;
		e)	arg_element=$OPTARG
			;;
		f)	override_snap_list_frequency=$OPTARG
			;;
		g)	override_path_snap_target=$OPTARG
			;;
		j)	arg_job=$OPTARG
			;;
		m)	arg_snap_multi=$OPTARG
			;;
		n)	override_snap_limit=$OPTARG
			;;
		o)	arg_output=$OPTARG
			;;
		r)	arg_snap_rollback=set
			;;
		s)	override_snap_name=$OPTARG
			;;
		t)	override_snap_date=$OPTARG
			;;
		v)	echo "${version}"
			exit 0
			;;
		h)	if [[ -n ${arg_debug} ]]; then echo "${usage_debug}"; else echo "${usage_main}"; fi
			exit 0
			;;
		?)	echo "Invalid option: -$OPTARG" >&2 && exit 1
			;;
	esac
done

# --------------------------------- Config -------------------------------------

# backup IFS and declare associative array for deleting redundant snap_sets
IFSBAK=${IFS}
sides="source target"
pairs_check="current_server:elem_server_SIDE current_ssh:ssh_SIDE current_snap_location:snap_location_SIDE current_snap_location_remote:snap_location_remote_SIDE current_path_snap:path_snap_SIDE current_path_root:path_root_SIDE current_path_offset:path_offset_SIDE current_snap_list:snap_list_SIDE current_snap_limit:snap_limit_SIDE current_sync_name:sync_name_SIDE[aa] current_sync_vmid:sync_vmid[aa]"
pairs_snapshot="current_server:elem_server_SIDE current_ssh:ssh_SIDE current_snap_set:snap_set_SIDE[aa] current_snap_root:snap_root_SIDE[aa]"
pairs_delete="current_server:elem_server_SIDE current_ssh:ssh_SIDE current_snap_shots:snap_shots_strict_SIDE[aa] current_snap_number:snap_number_strict_SIDE[aa] current_snap_limit:snap_limit_SIDE current_sync_vmid:sync_vmid[aa]"
declare -A unique_elements

if [[ -n "${arg_config}" ]]; then
	backend=backup
	export dir_conf arg_config backend
	${dir_modules}/do-config
	exit 0
fi

if [[ -n "${arg_job}" ]]; then
	job=${dir_conf}/job/${arg_job}.job
	probe=$(find ${job} 2>&1)

	if [[ "${probe}" == "${job}" ]]; then
		source ${job}; else
		echo "the job: ${arg_job} does not exist" && exit 1
	fi
fi

if [[ -n "${arg_debug}" ]] && [[ ! "${arg_debug}" == "create"* ]]; then
	element=${dir_conf}/debug/${arg_element}.dump; else
	element=${dir_conf}/backup/${arg_element}.bak
fi
probe=$(find ${element} 2>&1)

# check if element exists
if [[ ! "${probe}" == "${element}" ]]; then
	echo "the element: ${arg_element} does not exist" && exit 1
fi
export supported_mode supported_fs supported_snap_location supported_log_form supported_element_version element arg_output arg_snap_multi arg_snap_rollback override_path_snap_target override_snap_date override_snap_limit override_snap_list_frequency override_snap_name

# --------------------------------- Debug --------------------------------------

if [[ -n "${arg_debug}" ]]; then
	# if arg_debug is not create, call the module and exit the script
	if [[ ! "${arg_debug}" == "create"* ]]; then
		debug_mode=${arg_debug}
		export debug_mode
		${dir_modules}/do-debug
		exit 0
	# if arg_debug is create, split, if exists, the argument or set the argument to all (modules)
	elif [[ "${arg_debug}" == *":"* ]]; then
		debug_mode=$(echo "${arg_debug}" | cut -d ":" -f 2); else
		debug_mode=all
		export dir_modules debug_mode
	fi
	unset arg_debug
fi

# ------------------------------- Functions ------------------------------------

# if exit returns a non-zero value, show the apropriate error message and exit
function check-exit {
	exit_code=${?}
	if [[ ! "${exit_code}" == "0" ]]; then
		debug_mode=${module_current}
	fi

	if [[ "${debug_mode}" == "all" ]] || [[ "${debug_mode}" == "${module_current}" ]]; then
		if [[ -n "${aa}" ]]; then
			name_current=$(echo "${sync_name_source[aa]}" | tr " " "-")
			export name_current
		fi
		export arg_element dir_conf dir_modules debug_mode exit_code module_current oss_parameter

		${dir_modules}/do-debug
		${dir_modules}/do-exit
		if [[ ! "${?}" == "0" ]]; then
			exit 1
		fi
		# unexport variables but not unset.
		export -n arg_element dir_conf module_current exit_code
		unset name_current oss_parameter
	fi
}

function find-uniques () {
	if [[ -n "${unique_elements[${2}]}" ]] && [[ ! "${unique_elements[${2}]}" == "unset" ]]; then
		if [[ "${1}" == "snap_root_source" ]]; then
			unset snap_root_source[${unique_elements[${2}]}];
		elif [[ "${1}" == "snap_set_source" ]]; then
			unset snap_set_source[${unique_elements[${2}]}];
		elif [[ "${1}" == "snap_root_target" ]]; then
			unset snap_root_target[${unique_elements[${2}]}];
		elif [[ "${1}" == "snap_set_target" ]]; then
			unset snap_set_target[${unique_elements[${2}]}]
		elif [[ "${1}" == "sync_vmid" ]]; then
			unset sync_vmid[${unique_elements[${2}]}]
		fi
	fi
	unique_elements[${2}]=${aa}
}

function current-variables () {
	for pair in ${2}
	do	key=$(echo "${pair}" | cut -d ":" -f 1)
		value=$(echo "${pair}" | cut -d ":" -f 2- | sed "s;SIDE;${1};g")
		export ${key}="${!value}"
	done
}

# ------------------- Get element and check for syntax error -------------------

# hook for other methods instead of a element like a mysql database
if [[ -n "${element}" ]]; then
	module_current=get-element
	. ${dir_modules}/${module_current}
	check-exit
	unset element
fi

# these modules are for now in the same shell so check-exit does not catch the exit codes. but debug can create dumps to check the variables
module_current=check-element
. ${dir_modules}/${module_current}
check-exit
module_current=set-element
. ${dir_modules}/${module_current}
check-exit
unset supported_mode supported_fs supported_snap_location supported_log_form supported_element_version element override_path_snap_target override_snap_date override_snap_limit override_snap_list_frequency override_snap_name elem_mode elem_fs

# get-synclist can return spaces. so the ifs has to be by newline
IFS=$'\n'
# with synclist a list for syncnames can dynamically be created. At the moment this only works for absolute paths and not zfs with zfs list...
if [[ -n "${sync_list}" ]]; then
	module_current=get-synclist
	sync_name=($(${dir_modules}/${module_current}))
	check-exit
fi

# sync_name_number has n-elements but the script starts with element 0. So the script has to count to n-1
if [[ -n "${sync_name}" ]] && [[ ! -z "${sync_name}" ]]; then
	sync_name_number=${#sync_name[@]}; else
	echo "no sync_name is set. nothing to do" && exit 0
fi
IFS=${IFSBAK}

# --------------------- FIRST LOOP: set sync-variables -------------------------

# set the control-variable
aa="0"
# vmids, newsyncnames, pre- and suffixes are loaded as an array synchronous to sync_name.
# If these are set but the current element is empty, the last one set is used
# If these are not set sync_name is used for sync_name_target
while [[ "${sync_name_number}" -gt "${aa}" ]]
do	if [[ -z "${sync_name_new[aa]}" ]]; then
		sync_name_new[aa]=${sync_name[aa]}
	fi

	if [[ ! -z "${sync_name_new_prefix[*]}" ]] && [[ -z "${sync_name_new_prefix[aa]}" ]]; then
		sync_name_new_prefix[aa]=${sync_name_new_prefix[aa_old]}
	fi

	if [ ! -z "${sync_name_new_suffix[*]}" ] && [ -z "${sync_name_new_suffix[aa]}" ]; then
		sync_name_new_suffix[aa]=${sync_name_new_suffix[aa_old]}
	fi

	if [ "${mode_create}" == "kvm" ]; then
		if [ -z "${sync_vmid[aa]}" ]; then
			sync_vmid[aa]=${sync_vmid[aa_old]}
		fi
		find-uniques sync_vmid ${sync_vmid[aa]}
	fi

	##### define sync_name_source and sync_name_target #####
	if [[ "${arg_snap_rollback}" == "set" ]] && [[ "${mode_transfer}" == "zfs" ]]; then
		sync_name_source[aa]=${sync_name_new_prefix[aa]}${sync_name_new[aa]}${sync_name_new_suffix[aa]}
		sync_name_target[aa]=${sync_name[aa]}; else
		sync_name_source[aa]=${sync_name[aa]}
		sync_name_target[aa]=${sync_name_new_prefix[aa]}${sync_name_new[aa]}${sync_name_new_suffix[aa]}
	fi
	aa_old=${aa}
	aa=$((${aa} + 1))
done
unset sync_name sync_name_new sync_name_new_prefix sync_name_new_suffix

# ---------------- SECOND LOOP: check directories and syncnames ----------------

aa="0"
# The previous checks looked for syntax erros. This verifies if the directories actually exist.
while [[ "${sync_name_number}" -gt "${aa}" ]]
do	##### set current global variables #####
	current_sync_name_source=${sync_name_source[aa]}
	current_sync_name_target=${sync_name_target[aa]}
	export current_sync_name_source current_sync_name_target

	for current_side in ${sides}
	do	##### set current side variables #####
		export current_side
		current-variables "${current_side}" "${pairs_check}"

		# check all ${mode}. this is only necessary on source
		if [[ ! "${mode_create}" == "${mode_snapshot}" ]] && [[ "${current_side}" == "source" ]]; then
			if [[ ! "${mode_create}" == "kvm" ]] || ([[ "${mode_create}" == "kvm" ]] && [[ -n "${sync_vmid[aa]}" ]]); then
				module_current=check-create
				${dir_modules}/${module_current}
				check-exit
				unset current_snap_location current_snap_location_remote
			fi
		fi

		if [[ -n "${mode_snapshot}" ]]; then
			module_current=check-${mode_snapshot}
			result=$(${dir_modules}/${module_current})
			check-exit
			declare snap_root_${current_side}[aa]="$(echo ${result} | cut -d "~" -f 1)"
			declare snap_set_${current_side}[aa]="$(echo ${result} | cut -d "~" -f 2)"
			if [[ "${mode_snapshot}" == "file" ]]; then
				if [[ "${current_side}" == "source" ]]; then
					snap_file_type[aa]=$(echo ${result} | cut -d "~" -f 3)
					mode_override[aa]=$(echo ${result} | cut -d "~" -f 4);
				fi
				# for btrfs/zfs if rsync is used sync_name is not always a subvolume. for file this is of no consequence
			elif [[ "${mode_transfer}" == "rsync" ]]; then
				if [[ "${current_side}" == "source" ]]; then
					find-uniques snap_root_source ${snap_root_source[aa]}
					find-uniques snap_set_source ${snap_set_source[aa]};
				elif [[ "${current_side}" == "target" ]]; then
					find-uniques snap_root_target ${snap_root_target[aa]}
					find-uniques snap_set_target ${snap_set_target[aa]}
				fi
			fi
			unset result
		fi

		# check all ${mode_transfer}. this is not necessary for fs=file and mode=rsync
		if [[ "${mode_transfer}" == "rsync" ]] && [[ ! "${mode_snapshot}" == "file" ]]; then
			module_current=check-copy
			declare snap_rsync_${current_side}[aa]="$(${dir_modules}/${module_current})"
			check-exit
		fi
	done

	########## output datasets ##########
	if [[ "${show_datasets}" == "set" ]]; then
		printf -- "\n--------------- ${sync_name_source[aa]} ---------------\n\n"
		echo "Sourcedataset is ${snap_set_source[aa]}"
		echo "Targetdataset is ${snap_set_target[aa]}"
		echo "Sourceroot is ${snap_root_source[aa]}"
		echo "Targetroot is ${snap_root_target[aa]}"
		echo "Sourcersync is ${snap_rsync_source[aa]}"
		echo "Targetrsync is ${snap_rsync_target[aa]}"
		echo "sync_name_source is ${sync_name_source[aa]}"
		echo "sync_name_target is ${sync_name_target[aa]}"
	fi
	aa=$((${aa} + 1))
	unset current_snap_set current_side current_server current_ssh current_path_snap current_path_root current_path_offset current_snap_list current_snap_limit current_sync_name
done

# if output = datasets the script ends here
if [[ "${show_datasets}" == "set" ]] && [[ ! "${show_commands}" == "set" ]]; then
	exit 0; else
	unset unique_elements
fi

# ------------------ THIRD LOOP: create source snapshots -----------------------

if [[ "${show_progress}" == "set" ]]; then
	printf -- "\n\n--------------- Create Snapshots ---------------\n\n"
fi

if [[ "${snap_limit_source}"  -ge 1 ]]; then
	module_current="own-snapshot"
	aa="0"
	while [[ "${sync_name_number}" -gt "${aa}" ]]
	do	# if snap_set_source or sync_vmid was deleted reset the loop
		if [[ ! -n "${snap_set_source[aa]}" ]] || ([[ "${mode_create}" == "kvm" ]] && [[ ! -n "${sync_vmid[aa]}" ]]); then
			aa=$((${aa} + 1))
			continue
		fi
		source ${dir_modules}/arg-osss
		if [[ "${snap_location_source}" == "ssh" ]]; then
			ssh ${ssh_source} "own-snapshot${oss_parameter}"; else
			env -i PATH="$PATH" own-snapshot ${oss_parameter}
		fi
		check-exit
		aa=$((${aa} + 1))
	done;
elif  [[ -n "${snap_list_source}" ]]; then
	source ${dir_modules}/arg-osss
	if [[ "${snap_location_source}" == "ssh" ]]; then
		ssh ${ssh_source} "own-snapshot${oss_parameter}"; else
		env -i PATH="$PATH" own-snapshot ${oss_parameter}
	fi
	check-exit
fi

# ----------------------- FOURTH LOOP: get snapshots ---------------------------

if [[ "${show_progress}" == "set" ]]; then
	printf -- "\n\n--------------- Get Snapshots ---------------\n\n"
fi

if [[ -n "${mode_snapshot}" ]]; then
	aa="0"
	while [[ "${sync_name_number}" -gt "${aa}" ]]
	do	##### set current global variables #####
		current_snap_file_type=${snap_file_type[aa]}
		export current_snap_file_type

		for current_side in ${sides}
		do	##### set current side variables #####
			export current_side
			current-variables "${current_side}" "${pairs_snapshot}"

			if [[ -n "${current_snap_set}" ]]; then
				# get snapshots on source
				module_current=get-snapshots
				result=$(${dir_modules}/${module_current})
				check-exit

				result_modified=$(echo "${result}" | awk -F '~' '{ print $2 }')
				declare snap_shots_${current_side}_ts[aa]="${result_modified}"
				if [[ -n "$(echo "${result}" | awk -F '~' '{ print $3 }' | grep 'timestamp')" ]]; then
					declare snap_shots_quality_${current_side}[aa]=timestamp; else
					declare snap_shots_quality_${current_side}[aa]=datestring
				fi
				result=$(echo "${result}" | awk -F '~' '{ print $1 }')
				declare snap_shots_${current_side}[aa]="${result}"
				result_modified=$(echo "${result}" | sed '/^\s*$/d' | awk 'END{print NR}')
				declare snap_number_${current_side}[aa]="${result_modified}"
				result_modified=$(echo "${result}" | grep ${snap_name} || true)
				declare snap_shots_strict_${current_side}[aa]="${result_modified}"
				result_modified=$(echo "${result}" | grep ${snap_name} | sed '/^\s*$/d' | awk 'END{print NR}' || true)
				declare snap_number_strict_${current_side}[aa]="${result_modified}"
			fi
		done
		unset result result_modified

		if [[ "${show_snapshots}" == "set" ]]; then
			printf -- "\n--------------- ${sync_name_source[aa]} ---------------\n\n"
			echo "-------------------------"
			printf "The Snapshotnumber for source is ${snap_number_source[aa]}:\n${snap_shots_source[aa]}\nThe Snapshotnumber for source with the name ${snap_name} is ${snap_number_strict_source[aa]}:\n${snap_shots_strict_source[aa]}\nThe Quality is ${snap_shots_quality_source[aa]}\n"
			printf "The Snapshotnumber for target is ${snap_number_target[aa]}:\n${snap_shots_target[aa]}\nThe Snapshotnumber for target with the name ${snap_name} is ${snap_number_strict_target[aa]}:\n${snap_shots_strict_target[aa]}\nThe Quality is ${snap_shots_quality_target[aa]}\n"
			echo "-------------------------"
		fi
		aa=$((${aa} + 1))
		unset current_snap_file_type current_side current_server current_ssh current_snap_set current_snap_root
	done
fi

# if output = snapshots the script ends here
if [[ "${show_snapshots}" == "set" ]] && [[ ! "${show_commands}" == "set" ]]; then
	exit 0
fi

# ------------------- FIFTH LOOP: sync source and target -----------------------

if [[ "${show_progress}" == "set" ]]; then
	printf -- "\n\n--------------- Copy Snapshots ---------------\n\n"
fi

aa="0"
# Loop for actual copy, snapshots and log
while [[ "${sync_name_number}" -gt "${aa}" ]]
do	if [[ "${mode_transfer}" == "${mode_snapshot}" ]] || [[ -n "${log_mode}" ]] || ([[ "${mode_snapshot}" == "file" ]] && [[ "${snap_number_strict_source[aa]}" -ge "1" ]]); then
		##### set current source variable #####
		current_snap_shots_source=${snap_shots_source[aa]}
		current_snap_shots_source_ts=${snap_shots_source_ts[aa]}
		current_snap_shots_quality_source=${snap_shots_quality_source[aa]}
		current_snap_number_source=${snap_number_source[aa]}
		current_snap_shots_strict_source=${snap_shots_strict_source[aa]}
		export current_snap_shots_source current_snap_shots_source_ts current_snap_shots_quality_source current_snap_number_source current_snap_shots_strict_source

		##### set current target variable #####
		current_snap_shots_target=${snap_shots_target[aa]}
		current_snap_shots_target_ts=${snap_shots_target_ts[aa]}
		current_snap_shots_quality_target=${snap_shots_quality_target[aa]}
		current_snap_number_target=${snap_number_target[aa]}
		current_snap_set_target=${snap_set_target[aa]}
		export current_snap_shots_target current_snap_shots_target_ts current_snap_shots_quality_target current_snap_number_target current_snap_set_target

		# get snapvars
		module_current=set-snapvars
		result=$(${dir_modules}/${module_current})
		check-exit

		snap_new_source=$(echo "${result}" | cut -d "~" -f 1)
		snap_common_source=$(echo "${result}" | cut -d "~" -f 2)
		snap_old_target=$(echo "${result}" | cut -d "~" -f 3)
		unset result
		export snap_new_source snap_common_source snap_old_target
	fi

	if [[ "${mode_transfer}" == "rsync" ]] && [[ ! "${mode_snapshot}" == "file" ]]; then
		current_snap_rsync_source=${snap_rsync_source[aa]}
		current_snap_rsync_target=${snap_rsync_target[aa]}
		export current_snap_rsync_source current_snap_rsync_target
	fi

	if [[ "${show_progress}" == "set" ]]; then
		printf -- "\n--------------- ${sync_name_source[aa]} ---------------\n\n"
	fi

	if  [[ "${show_snapvars}" == "set" ]]; then
		printf "sourcesnapsnew is:\n${snap_new_source}\nsourcesnapsold is:\n${snap_common_source}\ntargetsnapsold is:\n${snap_old_target}\n"
		if [[ ! "${show_commands}" == "set" ]]; then
			# if only snapvars should be shown this loop resets here
			aa=$((${aa} + 1))
			continue
		fi
	fi

	if [[ ! "${snap_common_source}" == "newest" ]]; then
		if [[ -n "${arg_snap_multi}" ]]; then
			current_snap_set_source=${snap_set_source[aa]}
			export dir_modules current_snap_set_source

			module_current=set-multisnap
			${dir_modules}/${module_current}
			check-exit
			unset current_snap_set_source

		elif [[ "${mode_transfer}" == "zfs" ]]; then
			module_current=copy-zfs
			${dir_modules}/${module_current}
			check-exit

		elif [[ "${mode_transfer}" == "btrfs" ]]; then
			module_current=copy-btrfs
			${dir_modules}/${module_current}
			check-exit

		elif [[ "${mode_transfer}" == "rsync" ]]; then
			module_current=copy-rsync
			${dir_modules}/${module_current}
			check-exit

			if [[ -n "${snap_set_target[aa]}" ]] && [[ "${snap_limit_target}" -ge 1 ]] && [[ ! "${mode_snapshot}" == "file" ]]; then
				module_current=own-snapshot
				source ${dir_modules}/arg-osst
				if [[ "${snap_location_target}" == "ssh" ]]; then
					ssh ${ssh_target} "own-snapshot${oss_parameter}"; else
					env -i PATH="$PATH" own-snapshot ${oss_parameter}
				fi
				check-exit
			fi
		fi
	fi

	if [[ -n "${log_mode}" ]]; then
		mode_override_current=${mode_override[aa]}
		current_sync_name_source=${sync_name_source[aa]}
		snap_new_target=${snap_shots_strict_target[aa]##*$'\n'}
		export mode_override_current current_sync_name_source snap_new_target
		module_current=do-log
		${dir_modules}/${module_current}
		check-exit
		unset mode_override_current current_sync_name_source snap_new_target
	fi
	aa=$((${aa} + 1))
	unset current_snap_shots_source current_snap_shots_source_ts current_snap_shots_quality_source current_snap_number_source current_snap_shots_target current_snap_shots_target_ts current_snap_shots_quality_target current_snap_number_target current_snap_rsync_source current_snap_rsync_target snap_new_source snap_common_source snap_old_target snap_exist_offset
done

if [[ -n "${snap_list_target}" ]]; then
	module_current=own-snapshot
	source ${dir_modules}/arg-osst
	if [[ "${snap_location_target}" == "ssh" ]]; then
		ssh ${ssh_target} "own-snapshot${oss_parameter}"; else
		env -i PATH="$PATH" own-snapshot ${oss_parameter}
	fi
		check-exit
fi

if [[ "${show_snapvars}" == "set" ]] && [[ ! "${show_commands}" == "set" ]]; then
	exit 0
fi

# ---------------------- SIXTH LOOP: delete snapshots --------------------------

if [[ "${snap_limit_source}" -eq 0 ]] && [[ "${snap_limit_target}" -eq 0 ]]; then
	exit 0
fi

if [[ "${show_progress}" == "set" ]]; then
	printf -- "\n--------------- Delete Snapshots ---------------\n\n"
fi

aa="0"
while [[ "${sync_name_number}" -gt "${aa}" ]]
do	for current_side in ${sides}
	do	if [[ "${current_side}" == "source" ]]; then
			# if snap_set_source or sync_vmid was deleted reset the loop
			if [[ "${snap_limit_source}" -eq 0 ]] || [[ ! -n "${snap_set_source[aa]}" ]] || ([[ "${mode_create}" == "kvm" ]] && [[ ! -n "${sync_vmid[aa]}" ]]); then
				continue
			fi;
		elif [[ "${current_side}" == "target" ]]; then
			# if snap_set_target was deleted reset the loop
			if [[ "${snap_limit_target}" -eq 0 ]] || [[ ! -n "${snap_set_target[aa]}" ]]; then
				continue
			fi
		fi

		##### set current side variable #####
		export current_side
		current-variables "${current_side}" "${pairs_delete}"

		module_current=do-snapdel
		${dir_modules}/${module_current}
		check-exit
	done
	unset current_side current_server current_ssh current_snap_shots current_snap_number current_snap_limit current_sync_vmid
	aa=$((${aa} + 1))
done
